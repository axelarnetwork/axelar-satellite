"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeTx = exports.serializeTx = exports.WebExtensionTxStatus = void 0;
const terra_js_1 = require("@terra-money/terra.js");
var WebExtensionTxStatus;
(function (WebExtensionTxStatus) {
    WebExtensionTxStatus["PROGRESS"] = "PROGRESS";
    WebExtensionTxStatus["SUCCEED"] = "SUCCEED";
    WebExtensionTxStatus["FAIL"] = "FAIL";
    WebExtensionTxStatus["DENIED"] = "DENIED";
})(WebExtensionTxStatus = exports.WebExtensionTxStatus || (exports.WebExtensionTxStatus = {}));
function serializeTx(tx) {
    var _a, _b, _c;
    return {
        msgs: tx.msgs.map((msg) => msg.toJSON(tx.isClassic)),
        fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(tx.isClassic),
        memo: tx.memo,
        gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),
        gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),
        feeDenoms: tx.feeDenoms,
    };
}
exports.serializeTx = serializeTx;
function deserializeTx(tx) {
    const msgs = tx.msgs.map((msg) => JSON.parse(msg));
    const isProto = '@type' in msgs[0];
    return {
        ...tx,
        msgs: msgs.map((msg) => (isProto ? terra_js_1.Msg.fromData(msg, tx.isClassic) : terra_js_1.Msg.fromAmino(msg, tx.isClassic))),
        fee: tx.fee
            ? isProto
                ? terra_js_1.Fee.fromData(JSON.parse(tx.fee))
                : terra_js_1.Fee.fromAmino(JSON.parse(tx.fee))
            : undefined,
    };
}
exports.deserializeTx = deserializeTx;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dlYi1leHRlbnNpb24taW50ZXJmYWNlL21vZGVscy90eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFNK0I7QUFPL0IsSUFBWSxvQkFLWDtBQUxELFdBQVksb0JBQW9CO0lBQzlCLDZDQUFxQixDQUFBO0lBQ3JCLDJDQUFtQixDQUFBO0lBQ25CLHFDQUFhLENBQUE7SUFDYix5Q0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTFcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFLL0I7QUF5RUQsU0FBZ0IsV0FBVyxDQUFDLEVBQW9COztJQUM5QyxPQUFPO1FBQ0wsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRCxHQUFHLEVBQUUsTUFBQSxFQUFFLENBQUMsR0FBRywwQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDYixTQUFTLEVBQUUsTUFBQSxFQUFFLENBQUMsU0FBUywwQ0FBRSxRQUFRLEVBQUU7UUFDbkMsYUFBYSxFQUFFLE1BQUEsRUFBRSxDQUFDLGFBQWEsMENBQUUsUUFBUSxFQUFFO1FBQzNDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUztLQUN4QixDQUFDO0FBQ0osQ0FBQztBQVRELGtDQVNDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLEVBQTZCO0lBQ3pELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuQyxPQUFPO1FBQ0wsR0FBRyxFQUFFO1FBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3ZHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztZQUNULENBQUMsQ0FBQyxPQUFPO2dCQUNQLENBQUMsQ0FBQyxjQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLENBQUMsY0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsU0FBUztLQUNkLENBQUM7QUFDSixDQUFDO0FBYkQsc0NBYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFeHRlbnNpb25PcHRpb25zLFxuICBGZWUsXG4gIE1zZyxcbiAgUHVibGljS2V5LFxuICBUeCxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7XG4gIFdlYkV4dGVuc2lvbkNyZWF0ZVR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeEZhaWxlZCxcbiAgV2ViRXh0ZW5zaW9uVHhVbnNwZWNpZmllZEVycm9yLFxufSBmcm9tICcuLi9lcnJvcnMnO1xuXG5leHBvcnQgZW51bSBXZWJFeHRlbnNpb25UeFN0YXR1cyB7XG4gIFBST0dSRVNTID0gJ1BST0dSRVNTJyxcbiAgU1VDQ0VFRCA9ICdTVUNDRUVEJyxcbiAgRkFJTCA9ICdGQUlMJyxcbiAgREVOSUVEID0gJ0RFTklFRCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhQcm9ncmVzcyB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuUFJPR1JFU1M7XG4gIHBheWxvYWQ/OiB1bmtub3duO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblBvc3RQYXlsb2FkIHtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIHJhd19sb2c6IHN0cmluZztcbiAgdHhoYXNoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFdlYkV4dGVuc2lvblNpZ25QYXlsb2FkID0gVHguRGF0YTtcblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25TaWduQnl0ZXNQYXlsb2FkIHtcbiAgcmVjaWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogYmFzZTY0IFVpbnQ4QXJyYXlcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIC8vIHN0cmluZ2lmaWVkIGJ5XG4gICAqIEJ1ZmZlci5mcm9tKFVpbnQ4QXJyYXkpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgKlxuICAgKiAvLyB0byBVaW50OEFycmF5XG4gICAqIFVpbnQ4QXJyYXkuZnJvbShCdWZmZXIuZnJvbShiYXNlNjRTdHJpbmcsICdiYXNlNjQnKSlcbiAgICogYGBgXG4gICAqL1xuICBzaWduYXR1cmU6IHN0cmluZztcblxuICAvKipcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIFB1YmxpY0tleS5mcm9tRGF0YShwdWJsaWNfa2V5KVxuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpY19rZXk/OiBQdWJsaWNLZXkuRGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeFN1Y2NlZWQ8UGF5bG9hZD4ge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLlNVQ0NFRUQ7XG4gIHBheWxvYWQ6IFBheWxvYWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhGYWlsIHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5GQUlMO1xuICBlcnJvcjpcbiAgICB8IFdlYkV4dGVuc2lvbkNyZWF0ZVR4RmFpbGVkXG4gICAgfCBXZWJFeHRlbnNpb25UeEZhaWxlZFxuICAgIHwgV2ViRXh0ZW5zaW9uVHhVbnNwZWNpZmllZEVycm9yO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4RGVuaWVkIHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5ERU5JRUQ7XG59XG5cbmV4cG9ydCB0eXBlIFdlYkV4dGVuc2lvblR4UmVzdWx0PFBheWxvYWQ+ID1cbiAgfCBXZWJFeHRlbnNpb25UeFByb2dyZXNzXG4gIHwgV2ViRXh0ZW5zaW9uVHhTdWNjZWVkPFBheWxvYWQ+XG4gIHwgV2ViRXh0ZW5zaW9uVHhGYWlsXG4gIHwgV2ViRXh0ZW5zaW9uVHhEZW5pZWQ7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gZnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXplZENyZWF0ZVR4T3B0aW9uc1xuICBleHRlbmRzIE9taXQ8RXh0ZW5zaW9uT3B0aW9ucywgJ21zZ3MnIHwgJ2ZlZSc+IHtcbiAgbXNnczogc3RyaW5nW107XG4gIGZlZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplVHgodHg6IEV4dGVuc2lvbk9wdGlvbnMpOiBTZXJpYWxpemVkQ3JlYXRlVHhPcHRpb25zIHtcbiAgcmV0dXJuIHtcbiAgICBtc2dzOiB0eC5tc2dzLm1hcCgobXNnKSA9PiBtc2cudG9KU09OKHR4LmlzQ2xhc3NpYykpLFxuICAgIGZlZTogdHguZmVlPy50b0pTT04odHguaXNDbGFzc2ljKSxcbiAgICBtZW1vOiB0eC5tZW1vLFxuICAgIGdhc1ByaWNlczogdHguZ2FzUHJpY2VzPy50b1N0cmluZygpLFxuICAgIGdhc0FkanVzdG1lbnQ6IHR4Lmdhc0FkanVzdG1lbnQ/LnRvU3RyaW5nKCksXG4gICAgZmVlRGVub21zOiB0eC5mZWVEZW5vbXMsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZVR4KHR4OiBTZXJpYWxpemVkQ3JlYXRlVHhPcHRpb25zKTogRXh0ZW5zaW9uT3B0aW9ucyB7XG4gIGNvbnN0IG1zZ3MgPSB0eC5tc2dzLm1hcCgobXNnKSA9PiBKU09OLnBhcnNlKG1zZykpO1xuICBjb25zdCBpc1Byb3RvID0gJ0B0eXBlJyBpbiBtc2dzWzBdO1xuXG4gIHJldHVybiB7XG4gICAgLi4udHgsXG4gICAgbXNnczogbXNncy5tYXAoKG1zZykgPT4gKGlzUHJvdG8gPyBNc2cuZnJvbURhdGEobXNnLCB0eC5pc0NsYXNzaWMpIDogTXNnLmZyb21BbWlubyhtc2csIHR4LmlzQ2xhc3NpYykpKSxcbiAgICBmZWU6IHR4LmZlZVxuICAgICAgPyBpc1Byb3RvXG4gICAgICAgID8gRmVlLmZyb21EYXRhKEpTT04ucGFyc2UodHguZmVlKSlcbiAgICAgICAgOiBGZWUuZnJvbUFtaW5vKEpTT04ucGFyc2UodHguZmVlKSlcbiAgICAgIDogdW5kZWZpbmVkLFxuICB9O1xufVxuIl19
/**
 * Create a memoized function
 *
 * @example
 * import memoize from 'proxy-memoize';
 *
 * const fn = memoize(obj => ({ sum: obj.a + obj.b, diff: obj.a - obj.b }));
 *
 * @param options
 * @param options.size - (default: 1)
 */
declare const memoize: <Obj extends object, Result>(fn: (obj: Obj) => Result, options?: {
    size?: number;
}) => (obj: Obj) => Result;
/**
 * This is to unwrap a proxy object and return an original object.
 * It returns null if not relevant.
 *
 * [Notes]
 * This function is for debugging purpose.
 * It's not supposed to be used in production and it's subject to change.
 *
 * @example
 * import memoize, { getUntrackedObject } from 'proxy-memoize';
 *
 * const fn = memoize(obj => {
 *   console.log(getUntrackedObject(obj));
 *   return { sum: obj.a + obj.b, diff: obj.a - obj.b };
 * });
 */
export { getUntracked as getUntrackedObject } from 'proxy-compare';
/**
 * This is to replace newProxy function in upstream library, proxy-compare.
 * Use it at your own risk.
 *
 * [Notes]
 * See related discussoin: https://github.com/dai-shi/proxy-compare/issues/40
 */
export { replaceNewProxy } from 'proxy-compare';
export default memoize;

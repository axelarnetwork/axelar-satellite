import { C as Chain, E as Ethereum } from '../index-58cffc47.js';
import { a as InjectedConnectorOptions, I as InjectedConnector } from '../injected-82510902.js';
import 'abitype';
import 'ethers';
import '../base-a32d0b91.js';
import 'eventemitter3';

type MetaMaskConnectorOptions = Pick<InjectedConnectorOptions, 'shimChainChangedDisconnect' | 'shimDisconnect'> & {
    /**
     * While "disconnected" with `shimDisconnect`, allows user to select a different MetaMask account (than the currently connected account) when trying to connect.
     */
    UNSTABLE_shimOnConnectSelectAccount?: boolean;
};
declare class MetaMaskConnector extends InjectedConnector {
    #private;
    readonly id = "metaMask";
    constructor({ chains, options: options_, }?: {
        chains?: Chain[];
        options?: MetaMaskConnectorOptions;
    });
    connect({ chainId }?: {
        chainId?: number;
    }): Promise<{
        account: `0x${string}`;
        chain: {
            id: number;
            unsupported: boolean;
        };
        provider: Ethereum;
    }>;
}

export { MetaMaskConnector, MetaMaskConnectorOptions };

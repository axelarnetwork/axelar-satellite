import Long from "long";
import * as _m0 from "protobufjs/minimal";
import { KeyType } from "../../../../axelar/tss/exported/v1beta1/types";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "axelar.nexus.exported.v1beta1";
export declare enum TransferState {
    TRANSFER_STATE_UNSPECIFIED = 0,
    TRANSFER_STATE_PENDING = 1,
    TRANSFER_STATE_ARCHIVED = 2,
    TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3,
    UNRECOGNIZED = -1
}
export declare function transferStateFromJSON(object: any): TransferState;
export declare function transferStateToJSON(object: TransferState): string;
export declare enum TransferDirection {
    TRANSFER_DIRECTION_UNSPECIFIED = 0,
    TRANSFER_DIRECTION_INCOMING = 1,
    TRANSFER_DIRECTION_OUTGOING = 2,
    UNRECOGNIZED = -1
}
export declare function transferDirectionFromJSON(object: any): TransferDirection;
export declare function transferDirectionToJSON(object: TransferDirection): string;
/** Chain represents the properties of a registered blockchain */
export interface Chain {
    name: string;
    supportsForeignAssets: boolean;
    keyType: KeyType;
    module: string;
}
/** CrossChainAddress represents a generalized address on any registered chain */
export interface CrossChainAddress {
    chain?: Chain;
    address: string;
}
/**
 * CrossChainTransfer represents a generalized transfer of some asset to a
 * registered blockchain
 */
export interface CrossChainTransfer {
    recipient?: CrossChainAddress;
    asset?: Coin;
    id: Long;
    state: TransferState;
}
/** TransferFee represents accumulated fees generated by the network */
export interface TransferFee {
    coins: Coin[];
}
export interface FeeInfo {
    chain: string;
    asset: string;
    feeRate: Uint8Array;
    minFee: Uint8Array;
    maxFee: Uint8Array;
}
export interface Asset {
    denom: string;
    isNativeAsset: boolean;
}
export declare const Chain: {
    encode(message: Chain, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Chain;
    fromJSON(object: any): Chain;
    toJSON(message: Chain): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        supportsForeignAssets?: boolean | undefined;
        keyType?: KeyType | undefined;
        module?: string | undefined;
    } & {
        name?: string | undefined;
        supportsForeignAssets?: boolean | undefined;
        keyType?: KeyType | undefined;
        module?: string | undefined;
    } & Record<Exclude<keyof I, keyof Chain>, never>>(object: I): Chain;
};
export declare const CrossChainAddress: {
    encode(message: CrossChainAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CrossChainAddress;
    fromJSON(object: any): CrossChainAddress;
    toJSON(message: CrossChainAddress): unknown;
    fromPartial<I extends {
        chain?: {
            name?: string | undefined;
            supportsForeignAssets?: boolean | undefined;
            keyType?: KeyType | undefined;
            module?: string | undefined;
        } | undefined;
        address?: string | undefined;
    } & {
        chain?: ({
            name?: string | undefined;
            supportsForeignAssets?: boolean | undefined;
            keyType?: KeyType | undefined;
            module?: string | undefined;
        } & {
            name?: string | undefined;
            supportsForeignAssets?: boolean | undefined;
            keyType?: KeyType | undefined;
            module?: string | undefined;
        } & Record<Exclude<keyof I["chain"], keyof Chain>, never>) | undefined;
        address?: string | undefined;
    } & Record<Exclude<keyof I, keyof CrossChainAddress>, never>>(object: I): CrossChainAddress;
};
export declare const CrossChainTransfer: {
    encode(message: CrossChainTransfer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CrossChainTransfer;
    fromJSON(object: any): CrossChainTransfer;
    toJSON(message: CrossChainTransfer): unknown;
    fromPartial<I extends {
        recipient?: {
            chain?: {
                name?: string | undefined;
                supportsForeignAssets?: boolean | undefined;
                keyType?: KeyType | undefined;
                module?: string | undefined;
            } | undefined;
            address?: string | undefined;
        } | undefined;
        asset?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        id?: string | number | Long.Long | undefined;
        state?: TransferState | undefined;
    } & {
        recipient?: ({
            chain?: {
                name?: string | undefined;
                supportsForeignAssets?: boolean | undefined;
                keyType?: KeyType | undefined;
                module?: string | undefined;
            } | undefined;
            address?: string | undefined;
        } & {
            chain?: ({
                name?: string | undefined;
                supportsForeignAssets?: boolean | undefined;
                keyType?: KeyType | undefined;
                module?: string | undefined;
            } & {
                name?: string | undefined;
                supportsForeignAssets?: boolean | undefined;
                keyType?: KeyType | undefined;
                module?: string | undefined;
            } & Record<Exclude<keyof I["recipient"]["chain"], keyof Chain>, never>) | undefined;
            address?: string | undefined;
        } & Record<Exclude<keyof I["recipient"], keyof CrossChainAddress>, never>) | undefined;
        asset?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["asset"], keyof Coin>, never>) | undefined;
        id?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["id"], keyof Long.Long>, never>) | undefined;
        state?: TransferState | undefined;
    } & Record<Exclude<keyof I, keyof CrossChainTransfer>, never>>(object: I): CrossChainTransfer;
};
export declare const TransferFee: {
    encode(message: TransferFee, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TransferFee;
    fromJSON(object: any): TransferFee;
    toJSON(message: TransferFee): unknown;
    fromPartial<I extends {
        coins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        coins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["coins"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["coins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "coins">, never>>(object: I): TransferFee;
};
export declare const FeeInfo: {
    encode(message: FeeInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FeeInfo;
    fromJSON(object: any): FeeInfo;
    toJSON(message: FeeInfo): unknown;
    fromPartial<I extends {
        chain?: string | undefined;
        asset?: string | undefined;
        feeRate?: Uint8Array | undefined;
        minFee?: Uint8Array | undefined;
        maxFee?: Uint8Array | undefined;
    } & {
        chain?: string | undefined;
        asset?: string | undefined;
        feeRate?: Uint8Array | undefined;
        minFee?: Uint8Array | undefined;
        maxFee?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof FeeInfo>, never>>(object: I): FeeInfo;
};
export declare const Asset: {
    encode(message: Asset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Asset;
    fromJSON(object: any): Asset;
    toJSON(message: Asset): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        isNativeAsset?: boolean | undefined;
    } & {
        denom?: string | undefined;
        isNativeAsset?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Asset>, never>>(object: I): Asset;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};

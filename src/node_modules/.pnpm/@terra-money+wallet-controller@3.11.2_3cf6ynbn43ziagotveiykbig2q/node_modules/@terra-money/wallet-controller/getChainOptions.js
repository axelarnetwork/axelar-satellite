const FALLBACK_MAINNET = {
    name: 'mainnet',
    chainID: 'phoenix-1',
    lcd: 'https://phoenix-lcd.terra.dev',
};
const FALLBACK = {
    defaultNetwork: FALLBACK_MAINNET,
    walletConnectChainIds: {
        1: FALLBACK_MAINNET,
        0: {
            name: 'testnet',
            chainID: 'pisco-1',
            lcd: 'https://pisco-lcd.terra.dev',
        },
        2: {
            name: 'classic',
            chainID: 'columbus-5',
            lcd: 'https://columbus-lcd.terra.dev',
        },
    },
};
let cache;
export async function getChainOptions() {
    return fetch('https://assets.terra.money/chains.json')
        .then((res) => res.json())
        .then((data) => {
        const chains = Object.values(data);
        const walletConnectChainIds = chains.reduce((result, network) => {
            if (typeof network.walletconnectID === 'number') {
                result[network.walletconnectID] = network;
            }
            else if (!result[1] && network.name === 'mainnet') {
                result[1] = network;
            }
            else if (!result[0] && network.name === 'testnet') {
                result[0] = network;
            }
            else if (!result[2] && network.name === 'classic') {
                result[2] = network;
            }
            return result;
        }, {});
        const chainOptions = {
            defaultNetwork: walletConnectChainIds[1],
            walletConnectChainIds,
        };
        cache = chainOptions;
        return chainOptions;
    })
        .catch((error) => {
        console.error('Failed to fetch chains.json', error);
        return cache !== null && cache !== void 0 ? cache : FALLBACK;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q2hhaW5PcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtY29udHJvbGxlci9nZXRDaGFpbk9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE1BQU0sZ0JBQWdCLEdBQUc7SUFDdkIsSUFBSSxFQUFFLFNBQVM7SUFDZixPQUFPLEVBQUUsV0FBVztJQUNwQixHQUFHLEVBQUUsK0JBQStCO0NBQ3JDLENBQUM7QUFFRixNQUFNLFFBQVEsR0FBaUM7SUFDN0MsY0FBYyxFQUFFLGdCQUFnQjtJQUNoQyxxQkFBcUIsRUFBRTtRQUNyQixDQUFDLEVBQUUsZ0JBQWdCO1FBQ25CLENBQUMsRUFBRTtZQUNELElBQUksRUFBRSxTQUFTO1lBQ2YsT0FBTyxFQUFFLFNBQVM7WUFDbEIsR0FBRyxFQUFFLDZCQUE2QjtTQUNuQztRQUNELENBQUMsRUFBRTtZQUNELElBQUksRUFBRSxTQUFTO1lBQ2YsT0FBTyxFQUFFLFlBQVk7WUFDckIsR0FBRyxFQUFFLGdDQUFnQztTQUN0QztLQUNGO0NBQ0YsQ0FBQztBQUVGLElBQUksS0FBbUMsQ0FBQztBQUV4QyxNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWU7SUFDbkMsT0FBTyxLQUFLLENBQUMsd0NBQXdDLENBQUM7U0FDbkQsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekIsSUFBSSxDQUFDLENBQUMsSUFBK0IsRUFBRSxFQUFFO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQzlELElBQUksT0FBTyxPQUFPLENBQUMsZUFBZSxLQUFLLFFBQVEsRUFBRTtnQkFDL0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDM0M7aUJBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDbkQsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQzthQUNyQjtpQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUNuRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO2FBQ3JCO2lCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ25ELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDckI7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDLEVBQUUsRUFBaUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sWUFBWSxHQUFpQztZQUNqRCxjQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLHFCQUFxQjtTQUN0QixDQUFDO1FBQ0YsS0FBSyxHQUFHLFlBQVksQ0FBQztRQUNyQixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEQsT0FBTyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxRQUFRLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV0d29ya0luZm8gfSBmcm9tICdAdGVycmEtbW9uZXkvd2FsbGV0LXR5cGVzJztcbmltcG9ydCB7IFdhbGxldENvbnRyb2xsZXJPcHRpb25zIH0gZnJvbSAnLi9jb250cm9sbGVyJztcblxuaW50ZXJmYWNlIENoYWluSW5mbyB7XG4gIG5hbWU6IHN0cmluZztcbiAgY2hhaW5JRDogc3RyaW5nO1xuICBsY2Q6IHN0cmluZztcbiAgd2FsbGV0Y29ubmVjdElEPzogbnVtYmVyO1xuICBhcGk/OiBzdHJpbmc7XG4gIG1hbnRsZT86IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgV2FsbGV0Q29udHJvbGxlckNoYWluT3B0aW9ucyA9IFBpY2s8XG4gIFdhbGxldENvbnRyb2xsZXJPcHRpb25zLFxuICAnZGVmYXVsdE5ldHdvcmsnIHwgJ3dhbGxldENvbm5lY3RDaGFpbklkcydcbj47XG5cbmNvbnN0IEZBTExCQUNLX01BSU5ORVQgPSB7XG4gIG5hbWU6ICdtYWlubmV0JyxcbiAgY2hhaW5JRDogJ3Bob2VuaXgtMScsXG4gIGxjZDogJ2h0dHBzOi8vcGhvZW5peC1sY2QudGVycmEuZGV2Jyxcbn07XG5cbmNvbnN0IEZBTExCQUNLOiBXYWxsZXRDb250cm9sbGVyQ2hhaW5PcHRpb25zID0ge1xuICBkZWZhdWx0TmV0d29yazogRkFMTEJBQ0tfTUFJTk5FVCxcbiAgd2FsbGV0Q29ubmVjdENoYWluSWRzOiB7XG4gICAgMTogRkFMTEJBQ0tfTUFJTk5FVCxcbiAgICAwOiB7XG4gICAgICBuYW1lOiAndGVzdG5ldCcsXG4gICAgICBjaGFpbklEOiAncGlzY28tMScsXG4gICAgICBsY2Q6ICdodHRwczovL3Bpc2NvLWxjZC50ZXJyYS5kZXYnLFxuICAgIH0sXG4gICAgMjoge1xuICAgICAgbmFtZTogJ2NsYXNzaWMnLFxuICAgICAgY2hhaW5JRDogJ2NvbHVtYnVzLTUnLFxuICAgICAgbGNkOiAnaHR0cHM6Ly9jb2x1bWJ1cy1sY2QudGVycmEuZGV2JyxcbiAgICB9LFxuICB9LFxufTtcblxubGV0IGNhY2hlOiBXYWxsZXRDb250cm9sbGVyQ2hhaW5PcHRpb25zO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2hhaW5PcHRpb25zKCk6IFByb21pc2U8V2FsbGV0Q29udHJvbGxlckNoYWluT3B0aW9ucz4ge1xuICByZXR1cm4gZmV0Y2goJ2h0dHBzOi8vYXNzZXRzLnRlcnJhLm1vbmV5L2NoYWlucy5qc29uJylcbiAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgIC50aGVuKChkYXRhOiBSZWNvcmQ8c3RyaW5nLCBDaGFpbkluZm8+KSA9PiB7XG4gICAgICBjb25zdCBjaGFpbnMgPSBPYmplY3QudmFsdWVzKGRhdGEpO1xuICAgICAgY29uc3Qgd2FsbGV0Q29ubmVjdENoYWluSWRzID0gY2hhaW5zLnJlZHVjZSgocmVzdWx0LCBuZXR3b3JrKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV0d29yay53YWxsZXRjb25uZWN0SUQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmVzdWx0W25ldHdvcmsud2FsbGV0Y29ubmVjdElEXSA9IG5ldHdvcms7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlc3VsdFsxXSAmJiBuZXR3b3JrLm5hbWUgPT09ICdtYWlubmV0Jykge1xuICAgICAgICAgIHJlc3VsdFsxXSA9IG5ldHdvcms7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlc3VsdFswXSAmJiBuZXR3b3JrLm5hbWUgPT09ICd0ZXN0bmV0Jykge1xuICAgICAgICAgIHJlc3VsdFswXSA9IG5ldHdvcms7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlc3VsdFsyXSAmJiBuZXR3b3JrLm5hbWUgPT09ICdjbGFzc2ljJykge1xuICAgICAgICAgIHJlc3VsdFsyXSA9IG5ldHdvcms7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sIHt9IGFzIFJlY29yZDxudW1iZXIsIE5ldHdvcmtJbmZvPik7XG4gICAgICBjb25zdCBjaGFpbk9wdGlvbnM6IFdhbGxldENvbnRyb2xsZXJDaGFpbk9wdGlvbnMgPSB7XG4gICAgICAgIGRlZmF1bHROZXR3b3JrOiB3YWxsZXRDb25uZWN0Q2hhaW5JZHNbMV0sXG4gICAgICAgIHdhbGxldENvbm5lY3RDaGFpbklkcyxcbiAgICAgIH07XG4gICAgICBjYWNoZSA9IGNoYWluT3B0aW9ucztcbiAgICAgIHJldHVybiBjaGFpbk9wdGlvbnM7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggY2hhaW5zLmpzb24nLCBlcnJvcik7XG4gICAgICByZXR1cm4gY2FjaGUgPz8gRkFMTEJBQ0s7XG4gICAgfSk7XG59XG4iXX0=
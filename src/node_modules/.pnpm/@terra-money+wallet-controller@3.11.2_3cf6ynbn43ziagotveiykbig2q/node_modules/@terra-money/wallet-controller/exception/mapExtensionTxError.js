import { CreateTxFailed, SignBytesFailed, Timeout, TxFailed, TxUnspecifiedError, UserDenied, } from '@terra-money/wallet-types';
import { WebExtensionCreateTxFailed, WebExtensionTxFailed, WebExtensionTxUnspecifiedError, WebExtensionUserDenied, } from '@terra-money/web-extension-interface';
import { isError } from './isError';
export function mapExtensionTxError(tx, error) {
    if (isError(error, UserDenied) ||
        isError(error, Timeout) ||
        isError(error, SignBytesFailed) ||
        isError(error, CreateTxFailed) ||
        isError(error, TxFailed) ||
        isError(error, TxUnspecifiedError)) {
        return error;
    }
    else if (isError(error, WebExtensionUserDenied)) {
        return new UserDenied();
    }
    else if (isError(error, WebExtensionCreateTxFailed)) {
        return new CreateTxFailed(tx, error.message);
    }
    else if (isError(error, WebExtensionTxFailed)) {
        return new TxFailed(tx, error.txhash, error.message, null);
    }
    else if (isError(error, WebExtensionTxUnspecifiedError)) {
        return new TxUnspecifiedError(tx, error.message);
    }
    return new TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
export function mapExtensionSignBytesError(bytes, error) {
    if (isError(error, UserDenied) ||
        isError(error, Timeout) ||
        isError(error, SignBytesFailed) ||
        isError(error, CreateTxFailed) ||
        isError(error, TxFailed) ||
        isError(error, TxUnspecifiedError)) {
        return error;
    }
    else if (isError(error, WebExtensionUserDenied)) {
        return new UserDenied();
    }
    return new SignBytesFailed(bytes, error instanceof Error ? error.message : String(error));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwRXh0ZW5zaW9uVHhFcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LWNvbnRyb2xsZXIvZXhjZXB0aW9uL21hcEV4dGVuc2lvblR4RXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFDZCxlQUFlLEVBQ2YsT0FBTyxFQUNQLFFBQVEsRUFDUixrQkFBa0IsRUFDbEIsVUFBVSxHQUNYLE1BQU0sMkJBQTJCLENBQUM7QUFDbkMsT0FBTyxFQUNMLDBCQUEwQixFQUMxQixvQkFBb0IsRUFDcEIsOEJBQThCLEVBQzlCLHNCQUFzQixHQUN2QixNQUFNLHNDQUFzQyxDQUFDO0FBRTlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxFQUFtQixFQUNuQixLQUFjO0lBRWQsSUFDRSxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQztRQUMxQixPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztRQUN2QixPQUFPLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQztRQUMvQixPQUFPLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQztRQUM5QixPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQztRQUN4QixPQUFPLENBQUMsS0FBSyxFQUFFLGtCQUFrQixDQUFDLEVBQ2xDO1FBQ0EsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxFQUFFO1FBQ2pELE9BQU8sSUFBSSxVQUFVLEVBQUUsQ0FBQztLQUN6QjtTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSwwQkFBMEIsQ0FBQyxFQUFFO1FBQ3JELE9BQU8sSUFBSSxjQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxFQUFFO1FBQy9DLE9BQU8sSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1RDtTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSw4QkFBOEIsQ0FBQyxFQUFFO1FBQ3pELE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xEO0lBQ0QsT0FBTyxJQUFJLGtCQUFrQixDQUMzQixFQUFFLEVBQ0YsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSwwQkFBMEIsQ0FDeEMsS0FBYSxFQUNiLEtBQWM7SUFFZCxJQUNFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsRUFDbEM7UUFDQSxPQUFPLEtBQUssQ0FBQztLQUNkO1NBQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLEVBQUU7UUFDakQsT0FBTyxJQUFJLFVBQVUsRUFBRSxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxJQUFJLGVBQWUsQ0FDeEIsS0FBSyxFQUNMLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDdkQsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDcmVhdGVUeEZhaWxlZCxcbiAgU2lnbkJ5dGVzRmFpbGVkLFxuICBUaW1lb3V0LFxuICBUeEZhaWxlZCxcbiAgVHhVbnNwZWNpZmllZEVycm9yLFxuICBVc2VyRGVuaWVkLFxufSBmcm9tICdAdGVycmEtbW9uZXkvd2FsbGV0LXR5cGVzJztcbmltcG9ydCB7XG4gIFdlYkV4dGVuc2lvbkNyZWF0ZVR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeEZhaWxlZCxcbiAgV2ViRXh0ZW5zaW9uVHhVbnNwZWNpZmllZEVycm9yLFxuICBXZWJFeHRlbnNpb25Vc2VyRGVuaWVkLFxufSBmcm9tICdAdGVycmEtbW9uZXkvd2ViLWV4dGVuc2lvbi1pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7IGlzRXJyb3IgfSBmcm9tICcuL2lzRXJyb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFwRXh0ZW5zaW9uVHhFcnJvcihcbiAgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgZXJyb3I6IHVua25vd24sXG4pOiBFcnJvciB7XG4gIGlmIChcbiAgICBpc0Vycm9yKGVycm9yLCBVc2VyRGVuaWVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFRpbWVvdXQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgU2lnbkJ5dGVzRmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIENyZWF0ZVR4RmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFR4RmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFR4VW5zcGVjaWZpZWRFcnJvcilcbiAgKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdlYkV4dGVuc2lvblVzZXJEZW5pZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBVc2VyRGVuaWVkKCk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBDcmVhdGVUeEZhaWxlZCh0eCwgZXJyb3IubWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uVHhGYWlsZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBUeEZhaWxlZCh0eCwgZXJyb3IudHhoYXNoLCBlcnJvci5tZXNzYWdlLCBudWxsKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3IpKSB7XG4gICAgcmV0dXJuIG5ldyBUeFVuc3BlY2lmaWVkRXJyb3IodHgsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBuZXcgVHhVbnNwZWNpZmllZEVycm9yKFxuICAgIHR4LFxuICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcEV4dGVuc2lvblNpZ25CeXRlc0Vycm9yKFxuICBieXRlczogQnVmZmVyLFxuICBlcnJvcjogdW5rbm93bixcbik6IEVycm9yIHtcbiAgaWYgKFxuICAgIGlzRXJyb3IoZXJyb3IsIFVzZXJEZW5pZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVGltZW91dCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBTaWduQnl0ZXNGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgQ3JlYXRlVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhVbnNwZWNpZmllZEVycm9yKVxuICApIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uVXNlckRlbmllZCkpIHtcbiAgICByZXR1cm4gbmV3IFVzZXJEZW5pZWQoKTtcbiAgfVxuICByZXR1cm4gbmV3IFNpZ25CeXRlc0ZhaWxlZChcbiAgICBieXRlcyxcbiAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvciksXG4gICk7XG59XG4iXX0=
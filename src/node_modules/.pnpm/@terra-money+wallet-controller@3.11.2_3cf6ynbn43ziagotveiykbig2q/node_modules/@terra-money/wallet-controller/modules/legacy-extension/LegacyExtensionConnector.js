import { WebExtensionStatus, WebExtensionTxStatus, } from '@terra-money/web-extension-interface';
import { AccAddress } from '@terra-money/terra.js';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { createFixedExtension } from './createFixedExtension';
const supportFeatures = [
    'post',
    'sign',
    'sign-bytes',
];
export class LegacyExtensionConnector {
    constructor(identifier) {
        this.identifier = identifier;
        this.hostWindow = null;
        this.statesSubscription = null;
        this.open = (hostWindow, statesObserver) => {
            this.hostWindow = hostWindow;
            this.statesSubscription = this._states
                .pipe(filter((states) => !!states))
                .subscribe(statesObserver);
            this.refetchStates();
        };
        this.close = () => {
            this._extension.disconnect();
        };
        this.requestApproval = () => {
            this.recheckStates();
        };
        this.refetchStates = () => {
            this.recheckStates();
        };
        this.post = (terraAddress, tx) => {
            const subject = new BehaviorSubject({
                status: WebExtensionTxStatus.PROGRESS,
            });
            this._extension
                .post(tx)
                .then(({ payload }) => {
                subject.next({
                    status: WebExtensionTxStatus.SUCCEED,
                    payload: payload.result,
                });
                subject.complete();
            })
                .catch((error) => subject.error(error));
            return subject.asObservable();
        };
        this.sign = (terraAddress, tx) => {
            const subject = new BehaviorSubject({
                status: WebExtensionTxStatus.PROGRESS,
            });
            this._extension
                .sign(tx)
                .then(({ payload }) => {
                subject.next({
                    status: WebExtensionTxStatus.SUCCEED,
                    payload: payload.result,
                });
                subject.complete();
            })
                .catch((error) => subject.error(error));
            return subject.asObservable();
        };
        this.signBytes = (terraAddress, bytes) => {
            const subject = new BehaviorSubject({
                status: WebExtensionTxStatus.PROGRESS,
            });
            this._extension
                .signBytes(bytes)
                .then(({ payload }) => {
                subject.next({
                    status: WebExtensionTxStatus.SUCCEED,
                    payload: {
                        recid: payload.result.recid,
                        signature: payload.result.signature,
                        public_key: {
                            '@type': '/cosmos.crypto.secp256k1.PubKey',
                            'key': payload.result.public_key,
                        },
                    },
                });
            })
                .catch((error) => subject.error(error));
            return subject.asObservable();
        };
        this.hasCW20Tokens = () => {
            throw new Error('[LegacyExtensionConnector] does not support hasCW20Tokens()');
        };
        this.addCW20Tokens = () => {
            throw new Error('[LegacyExtensionConnector] does not support addCW20Tokens()');
        };
        this.hasNetwork = () => {
            throw new Error('[LegacyExtensionConnector] does not support hasNetwork()');
        };
        this.addNetwork = () => {
            throw new Error('[LegacyExtensionConnector] does not support addNetwork()');
        };
        // ---------------------------------------------
        // internal
        // ---------------------------------------------
        this.recheckStates = async () => {
            if (this._extension.inTransactionProgress()) {
                return;
            }
            const infoResult = await this._extension.info();
            const connectResult = await this._extension.connect();
            if (connectResult.address && AccAddress.validate(connectResult.address)) {
                this._states.next({
                    type: WebExtensionStatus.READY,
                    network: infoResult,
                    focusedWalletAddress: connectResult.address,
                    wallets: [
                        {
                            name: '',
                            terraAddress: connectResult.address,
                            design: 'terra',
                        },
                    ],
                });
            }
            else {
                this._states.next({
                    type: WebExtensionStatus.READY,
                    network: infoResult,
                    focusedWalletAddress: undefined,
                    wallets: [],
                });
            }
        };
        this._states = new BehaviorSubject({
            type: WebExtensionStatus.INITIALIZING,
        });
        this._extension = createFixedExtension(identifier);
    }
    supportFeatures() {
        return supportFeatures;
    }
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFixedExtension = void 0;
const web_extension_interface_1 = require("@terra-money/web-extension-interface");
const terra_js_1 = require("@terra-money/terra.js");
function getErrorMessage(error) {
    try {
        if (typeof error.message === 'string') {
            return error.message;
        }
        else {
            return JSON.stringify(error);
        }
    }
    catch (_a) {
        return String(error);
    }
}
function toExplicitError(error) {
    if (error && 'code' in error) {
        switch (error.code) {
            // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L182
            case 1:
                return new web_extension_interface_1.WebExtensionUserDenied();
            // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L137
            case 2:
                if (error.data) {
                    const { txhash } = error.data;
                    return new web_extension_interface_1.WebExtensionTxFailed(txhash, getErrorMessage(error), null);
                }
                else {
                    return new web_extension_interface_1.WebExtensionTxFailed(undefined, getErrorMessage(error), null);
                }
            // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L153
            case 3:
                return new web_extension_interface_1.WebExtensionCreateTxFailed(getErrorMessage(error));
            default:
                return new web_extension_interface_1.WebExtensionTxUnspecifiedError(getErrorMessage(error));
        }
    }
    else {
        return new web_extension_interface_1.WebExtensionTxUnspecifiedError(getErrorMessage(error));
    }
}
function isValidResult({ error, ...payload }) {
    if (typeof payload.success !== 'boolean') {
        return false;
    }
    else if (typeof payload.result === 'undefined' &&
        typeof error === 'undefined') {
        return false;
    }
    return true;
}
const pool = new Map();
function createFixedExtension(identifier) {
    if (pool.has(identifier)) {
        return pool.get(identifier);
    }
    const extension = new terra_js_1.Extension(identifier);
    let _inTransactionProgress = false;
    const postResolvers = new Map();
    const signResolvers = new Map();
    const signBytesResolvers = new Map();
    const infoResolvers = new Set();
    const connectResolvers = new Set();
    extension.on('onPost', (result) => {
        if (!result || !isValidResult(result)) {
            return;
        }
        const { error, ...payload } = result;
        if (!postResolvers.has(payload.id)) {
            return;
        }
        const [resolve, reject] = postResolvers.get(payload.id);
        if (!payload.success) {
            reject(toExplicitError(error));
        }
        else if (resolve) {
            resolve({ name: 'onPost', payload });
        }
        postResolvers.delete(payload.id);
        if (postResolvers.size === 0) {
            _inTransactionProgress = false;
        }
    });
    extension.on('onSign', (result) => {
        if (!result || !isValidResult(result)) {
            return;
        }
        const { error, ...payload } = result;
        if (signResolvers.has(payload.id)) {
            const [resolve, reject] = signResolvers.get(payload.id);
            if (!payload.success) {
                reject(toExplicitError(error));
            }
            else if (resolve) {
                resolve({ name: 'onSign', payload });
            }
            signResolvers.delete(payload.id);
            if (signResolvers.size === 0) {
                _inTransactionProgress = false;
            }
        }
        else if (signBytesResolvers.has(payload.id)) {
            const [resolve, reject] = signBytesResolvers.get(payload.id);
            if (!payload.success) {
                reject(toExplicitError(error));
            }
            else if (resolve) {
                resolve({ name: 'onSignBytes', payload });
            }
            signBytesResolvers.delete(payload.id);
            if (signBytesResolvers.size === 0) {
                _inTransactionProgress = false;
            }
        }
    });
    extension.on('onInfo', (result) => {
        if (!result)
            return;
        const { error, ...payload } = result;
        for (const [resolve, reject] of infoResolvers) {
            if (error) {
                reject(error);
            }
            else {
                resolve(payload);
            }
        }
        infoResolvers.clear();
    });
    extension.on('onConnect', (result) => {
        if (!result)
            return;
        const { error, ...payload } = result;
        for (const [resolve, reject] of connectResolvers) {
            if (error) {
                reject(error);
            }
            else {
                resolve(payload);
            }
        }
        connectResolvers.clear();
    });
    function post(data) {
        return new Promise((...resolver) => {
            _inTransactionProgress = true;
            const id = extension.post({
                ...data,
                purgeQueue: true,
            });
            postResolvers.set(id, resolver);
            setTimeout(() => {
                if (postResolvers.has(id)) {
                    postResolvers.delete(id);
                    if (postResolvers.size === 0) {
                        _inTransactionProgress = false;
                    }
                }
            }, 1000 * 120);
        });
    }
    function sign(data) {
        return new Promise((...resolver) => {
            _inTransactionProgress = true;
            const id = extension.sign({
                ...data,
                purgeQueue: true,
            });
            signResolvers.set(id, resolver);
            setTimeout(() => {
                if (signResolvers.has(id)) {
                    signResolvers.delete(id);
                    if (signResolvers.size === 0) {
                        _inTransactionProgress = false;
                    }
                }
            }, 1000 * 120);
        });
    }
    function signBytes(bytes) {
        return new Promise((...resolver) => {
            _inTransactionProgress = true;
            const id = extension.signBytes({
                bytes,
                purgeQueue: true,
            });
            signBytesResolvers.set(id, resolver);
            setTimeout(() => {
                if (signBytesResolvers.has(id)) {
                    signBytesResolvers.delete(id);
                    if (signBytesResolvers.size === 0) {
                        _inTransactionProgress = false;
                    }
                }
            }, 1000 * 120);
        });
    }
    function connect() {
        return new Promise((...resolver) => {
            connectResolvers.add(resolver);
            extension.connect();
        });
    }
    function info() {
        return new Promise((...resolver) => {
            infoResolvers.add(resolver);
            extension.info();
        });
    }
    function disconnect() {
        connectResolvers.clear();
        infoResolvers.clear();
        postResolvers.clear();
        signResolvers.clear();
        signBytesResolvers.clear();
    }
    function inTransactionProgress() {
        return _inTransactionProgress;
    }
    const result = {
        post,
        sign,
        signBytes,
        connect,
        info,
        disconnect,
        inTransactionProgress,
    };
    pool.set(identifier, result);
    return result;
}
exports.createFixedExtension = createFixedExtension;
//# sourceMappingURL=data:application/json;base64,
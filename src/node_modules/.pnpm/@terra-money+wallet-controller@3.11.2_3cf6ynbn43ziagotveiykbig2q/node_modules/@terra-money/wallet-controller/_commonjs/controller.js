"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletController = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const wallet_types_1 = require("@terra-money/wallet-types");
const web_extension_interface_1 = require("@terra-money/web-extension-interface");
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const env_1 = require("./env");
const mapExtensionTxError_1 = require("./exception/mapExtensionTxError");
const mapWalletConnectError_1 = require("./exception/mapWalletConnectError");
const connect_modal_1 = require("./modules/connect-modal");
const extension_router_1 = require("./modules/extension-router");
const multiChannel_1 = require("./modules/extension-router/multiChannel");
const readonly_wallet_1 = require("./modules/readonly-wallet");
const walletconnect_1 = require("./modules/walletconnect");
const getExtensions_1 = require("./operators/getExtensions");
const toConnectedWallet_1 = require("./operators/toConnectedWallet");
const toLcdClient_1 = require("./operators/toLcdClient");
const browser_check_1 = require("./utils/browser-check");
const checkExtensionReady_1 = require("./utils/checkExtensionReady");
const sortConnections_1 = require("./utils/sortConnections");
const CONNECTIONS = {
    [wallet_types_1.ConnectType.READONLY]: {
        type: wallet_types_1.ConnectType.READONLY,
        name: 'View an address',
        icon: 'https://assets.terra.money/icon/wallet-provider/readonly.svg',
    },
    [wallet_types_1.ConnectType.WALLETCONNECT]: {
        type: wallet_types_1.ConnectType.WALLETCONNECT,
        name: 'Wallet Connect',
        icon: 'https://assets.terra.money/icon/wallet-provider/walletconnect.svg',
    },
};
const DEFAULT_WAITING_CHROME_EXTENSION_INSTALL_CHECK = 1000 * 3;
const WALLETCONNECT_SUPPORT_FEATURES = new Set([
    'post', 'sign-bytes'
]);
const EMPTY_SUPPORT_FEATURES = new Set();
//noinspection ES6MissingAwait
class WalletController {
    constructor(options) {
        var _a;
        this.options = options;
        this.extension = null;
        this.walletConnect = null;
        this.readonlyWallet = null;
        this.plugin = null;
        this.disableReadonlyWallet = null;
        this.disableExtension = null;
        this.disableWalletConnect = null;
        this.disableWalletPlugin = null;
        /**
         * Some mobile wallet emulates the behavior of chrome extension.
         * It confirms that the current connection environment is such a wallet.
         * (If you are running connect() by checking availableConnectType, you do not need to use this API.)
         *
         * @see Wallet#isChromeExtensionCompatibleBrowser
         */
        this.isChromeExtensionCompatibleBrowser = () => {
            var _a;
            return ((_a = this.options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : env_1.DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK)(navigator.userAgent);
        };
        /**
         * available connect types on the browser
         *
         * @see Wallet#availableConnectTypes
         */
        this.availableConnectTypes = () => {
            return this._availableConnectTypes.asObservable();
        };
        /**
         * available connections includes identifier, name, icon
         *
         * @see Wallet#availableConnections
         */
        this.availableConnections = () => {
            return this._availableConnectTypes.pipe((0, operators_1.map)((connectTypes) => {
                const connections = [];
                for (const connectType of connectTypes) {
                    if (connectType === wallet_types_1.ConnectType.EXTENSION) {
                        const terraExtensions = (0, multiChannel_1.getTerraExtensions)();
                        for (const terraExtension of terraExtensions) {
                            connections.push(memoConnection(wallet_types_1.ConnectType.EXTENSION, terraExtension.name, terraExtension.icon, terraExtension.identifier));
                        }
                    }
                    else if (connectType === wallet_types_1.ConnectType.PLUGINS) {
                        for (const plugin of this.options.plugins || []) {
                            connections.push(memoConnection(wallet_types_1.ConnectType.PLUGINS, plugin.name, plugin.icon, plugin.identifier));
                        }
                    }
                    else {
                        connections.push(CONNECTIONS[connectType]);
                    }
                }
                return (0, sortConnections_1.sortConnections)(connections);
            }));
        };
        /**
         * available install types on the browser
         *
         * in this time, this only contains [ConnectType.EXTENSION]
         *
         * @see Wallet#availableInstallTypes
         */
        this.availableInstallTypes = () => {
            return this._availableInstallTypes.asObservable();
        };
        /**
         * available installations includes identifier, name, icon, url
         *
         * @see Wallet#availableInstallations
         */
        this.availableInstallations = () => {
            return (0, rxjs_1.combineLatest)([this.availableConnections(), (0, getExtensions_1.getExtensions)()]).pipe((0, operators_1.map)(([connections, extensions]) => {
                const installedIdentifiers = new Set(connections
                    .filter(({ type, identifier }) => {
                    return type === wallet_types_1.ConnectType.EXTENSION && !!identifier;
                })
                    .map(({ identifier }) => {
                    return identifier;
                }));
                return extensions
                    .filter(({ identifier }) => {
                    return !installedIdentifiers.has(identifier);
                })
                    .map(({ name, identifier, icon, url }) => {
                    return {
                        type: wallet_types_1.ConnectType.EXTENSION,
                        identifier,
                        name,
                        icon,
                        url,
                    };
                });
            }));
        };
        /**
         * @see Wallet#status
         * @see Wallet#network
         * @see Wallet#wallets
         */
        this.states = () => {
            return this._states.asObservable();
        };
        /** get connectedWallet */
        this.connectedWallet = () => {
            return this._states.pipe((0, toConnectedWallet_1.toConnectedWallet)(this));
        };
        /** get lcdClient */
        this.lcdClient = (lcdClientConfig) => {
            return this._states.pipe((0, toLcdClient_1.toLcdClient)(lcdClientConfig));
        };
        /**
         * reload the connected wallet states
         *
         * in this time, this only work on the ConnectType.EXTENSION
         *
         * @see Wallet#recheckStatus
         */
        this.refetchStates = () => {
            var _a;
            if (this.disableExtension) {
                (_a = this.extension) === null || _a === void 0 ? void 0 : _a.refetchStates();
            }
        };
        /**
         * @deprecated Please use availableInstallations
         *
         * install for the connect type
         *
         * @see Wallet#install
         */
        this.install = (type) => {
            if (type === wallet_types_1.ConnectType.EXTENSION) {
                // TODO separate install links by browser types
                window.open(env_1.CHROME_EXTENSION_INSTALL_URL, '_blank');
            }
            else {
                console.warn(`[WalletController] ConnectType "${type}" does not support install() function`);
            }
        };
        /**
         * connect to wallet
         *
         * @see Wallet#connect
         */
        this.connect = async (_type, _identifier) => {
            var _a, _b, _c, _d, _e;
            let type;
            let identifier;
            if (!!_type) {
                type = _type;
                identifier = _identifier;
            }
            else {
                const connections = await (0, rxjs_1.firstValueFrom)(this.availableConnections());
                const selector = (_a = this.options.selectConnection) !== null && _a !== void 0 ? _a : connect_modal_1.selectConnection;
                const selected = await selector(connections);
                if (!selected) {
                    return;
                }
                type = selected[0];
                identifier = selected[1];
            }
            let networks;
            switch (type) {
                case wallet_types_1.ConnectType.READONLY:
                    networks = Object.keys(this.options.walletConnectChainIds).map((chainId) => this.options.walletConnectChainIds[+chainId]);
                    const createReadonlyWalletSession = (_d = (_c = (_b = this.options).createReadonlyWalletSession) === null || _c === void 0 ? void 0 : _c.call(_b, networks)) !== null && _d !== void 0 ? _d : (0, readonly_wallet_1.readonlyWalletModal)({ networks });
                    const readonlyWalletSession = await createReadonlyWalletSession;
                    if (readonlyWalletSession) {
                        this.enableReadonlyWallet((0, readonly_wallet_1.connect)(readonlyWalletSession));
                    }
                    break;
                case wallet_types_1.ConnectType.WALLETCONNECT:
                    this.enableWalletConnect((0, walletconnect_1.connect)(this.options));
                    break;
                case wallet_types_1.ConnectType.EXTENSION:
                    if (!this.extension) {
                        throw new Error(`extension instance is not created!`);
                    }
                    this.extension.connect(identifier);
                    this.enableExtension();
                    break;
                case wallet_types_1.ConnectType.PLUGINS:
                    networks = Object.keys(this.options.walletConnectChainIds).map((chainId) => this.options.walletConnectChainIds[+chainId]);
                    if (!this.options.plugins || this.options.plugins.length === 0) {
                        throw new Error(`not plugins found`);
                    }
                    let plugin = (_e = this.options.plugins) === null || _e === void 0 ? void 0 : _e.find((p) => {
                        return p.identifier === identifier;
                    });
                    if (!plugin) {
                        plugin = this.options.plugins[0];
                    }
                    const session = await plugin.createSession(networks);
                    if (!session) {
                        throw new Error(`error getting web3session`);
                    }
                    await session.connect();
                    this.enableWalletPlugin(plugin, session);
                    break;
                default:
                    throw new Error(`Unknown ConnectType!`);
            }
        };
        /**
         * manual connect to read only session
         *
         * @see Wallet#connectReadonly
         */
        this.connectReadonly = (terraAddress, network) => {
            this.enableReadonlyWallet((0, readonly_wallet_1.connect)({
                terraAddress,
                network,
            }));
        };
        /** @see Wallet#disconnect */
        this.disconnect = () => {
            var _a, _b, _c, _d;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            this.disableReadonlyWallet = null;
            (_b = this.disableExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            this.disableExtension = null;
            (_c = this.disableWalletConnect) === null || _c === void 0 ? void 0 : _c.call(this);
            this.disableWalletConnect = null;
            (_d = this.disableWalletPlugin) === null || _d === void 0 ? void 0 : _d.call(this);
            this.disableWalletPlugin = null;
            this.updateStates(this._notConnected);
        };
        /**
         * @see Wallet#post
         * @param tx
         * @param terraAddress only available new extension
         */
        this.post = async (tx, terraAddress) => {
            // ---------------------------------------------
            // extension
            // ---------------------------------------------
            if (this.disableExtension) {
                return new Promise((resolve, reject) => {
                    if (!this.extension) {
                        reject(new Error(`extension instance not created!`));
                        return;
                    }
                    const subscription = this.extension.post(tx, terraAddress).subscribe({
                        next: (txResult) => {
                            if (txResult.status === web_extension_interface_1.WebExtensionTxStatus.SUCCEED) {
                                resolve({
                                    ...tx,
                                    result: txResult.payload,
                                    success: true,
                                });
                                subscription.unsubscribe();
                            }
                        },
                        error: (error) => {
                            reject((0, mapExtensionTxError_1.mapExtensionTxError)(tx, error));
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            // ---------------------------------------------
            // wallet connect
            // ---------------------------------------------
            else if (this.walletConnect) {
                return this.walletConnect
                    .post(tx)
                    .then((result) => ({
                    ...tx,
                    result,
                    success: true,
                }))
                    .catch((error) => {
                    throw (0, mapWalletConnectError_1.mapWalletConnectError)(tx, error);
                });
            }
            else if (this.plugin) {
                return this.plugin.post(tx).catch((error) => {
                    throw (0, mapExtensionTxError_1.mapExtensionSignBytesError)(Buffer.from(''), error);
                });
            }
            else {
                throw new Error(`There are no connections that can be posting tx!`);
            }
        };
        /**
         * @see Wallet#sign
         * @param tx
         * @param terraAddress only available new extension
         */
        this.sign = async (tx, terraAddress) => {
            if (this.disableExtension) {
                return new Promise((resolve, reject) => {
                    if (!this.extension) {
                        reject(new Error(`extension instance is not created!`));
                        return;
                    }
                    const subscription = this.extension.sign(tx, terraAddress).subscribe({
                        next: (txResult) => {
                            if (txResult.status === web_extension_interface_1.WebExtensionTxStatus.SUCCEED) {
                                resolve({
                                    ...tx,
                                    result: terra_js_1.Tx.fromData(txResult.payload),
                                    success: true,
                                });
                                subscription.unsubscribe();
                            }
                        },
                        error: (error) => {
                            reject((0, mapExtensionTxError_1.mapExtensionTxError)(tx, error));
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            throw new Error(`sign() method only available on extension`);
        };
        /**
         * @see Wallet#signBytes
         * @param bytes
         * @param terraAddress only available new extension
         */
        this.signBytes = async (bytes, terraAddress) => {
            if (this.disableExtension) {
                return new Promise((resolve, reject) => {
                    if (!this.extension) {
                        reject(new Error(`extension instance is not created!`));
                        return;
                    }
                    const subscription = this.extension
                        .signBytes(bytes, terraAddress)
                        .subscribe({
                        next: (txResult) => {
                            if (txResult.status === web_extension_interface_1.WebExtensionTxStatus.SUCCEED) {
                                resolve({
                                    result: {
                                        recid: txResult.payload.recid,
                                        signature: Uint8Array.from(Buffer.from(txResult.payload.signature, 'base64')),
                                        public_key: txResult.payload.public_key
                                            ? terra_js_1.PublicKey.fromData(txResult.payload.public_key)
                                            : undefined,
                                    },
                                    success: true,
                                });
                                subscription.unsubscribe();
                            }
                        },
                        error: (error) => {
                            reject((0, mapExtensionTxError_1.mapExtensionSignBytesError)(bytes, error));
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            // ---------------------------------------------
            // wallet connect
            // ---------------------------------------------
            else if (this.walletConnect) {
                return this.walletConnect
                    .signBytes(bytes)
                    .then((result) => {
                    const key = new terra_js_1.SimplePublicKey(String(result.public_key)).toData();
                    return {
                        result: {
                            recid: result.recid,
                            signature: Uint8Array.from(Buffer.from(result.signature, 'base64')),
                            public_key: key
                                ? terra_js_1.PublicKey.fromData(key)
                                : undefined,
                        },
                        success: true,
                    };
                })
                    .catch((error) => {
                    throw (0, mapWalletConnectError_1.mapWalletConnectSignBytesError)(bytes, error);
                });
            }
            else {
                throw new Error(`There are no connections that can be signing bytes!`);
            }
        };
        /**
         * @see Wallet#hasCW20Tokens
         * @param chainID
         * @param tokenAddrs Token addresses
         */
        this.hasCW20Tokens = async (chainID, ...tokenAddrs) => {
            if (this.availableExtensionFeature('cw20-token')) {
                return this.extension.hasCW20Tokens(chainID, ...tokenAddrs);
            }
            throw new Error(`Does not support hasCW20Tokens() on this connection`);
        };
        /**
         * @see Wallet#addCW20Tokens
         * @param chainID
         * @param tokenAddrs Token addresses
         */
        this.addCW20Tokens = async (chainID, ...tokenAddrs) => {
            if (this.availableExtensionFeature('cw20-token')) {
                return this.extension.addCW20Tokens(chainID, ...tokenAddrs);
            }
            throw new Error(`Does not support addCW20Tokens() on this connection`);
        };
        /**
         * @see Wallet#hasNetwork
         * @param network
         */
        this.hasNetwork = (network) => {
            if (this.availableExtensionFeature('network')) {
                return this.extension.hasNetwork(network);
            }
            throw new Error(`Does not support hasNetwork() on this connection`);
        };
        /**
         * @see Wallet#hasNetwork
         * @param network
         */
        this.addNetwork = (network) => {
            if (this.availableExtensionFeature('network')) {
                return this.extension.addNetwork(network);
            }
            throw new Error(`Does not support addNetwork() on this connection`);
        };
        // ================================================================
        // internal
        // connect type changing
        // ================================================================
        this.availableExtensionFeature = (feature) => {
            if (this.disableExtension && this.extension) {
                const states = this.extension.getLastStates();
                return (states.type === extension_router_1.ExtensionRouterStatus.WALLET_CONNECTED &&
                    states.supportFeatures.has(feature));
            }
        };
        this.updateStates = (next) => {
            const prev = this._states.getValue();
            if (next.status === wallet_types_1.WalletStatus.WALLET_CONNECTED &&
                next.wallets.length === 0) {
                next = {
                    status: wallet_types_1.WalletStatus.WALLET_NOT_CONNECTED,
                    network: next.network,
                };
            }
            if (prev.status !== next.status || !(0, fast_deep_equal_1.default)(prev, next)) {
                this._states.next(next);
            }
        };
        this.enableReadonlyWallet = (readonlyWallet) => {
            var _a, _b, _c;
            (_a = this.disableWalletConnect) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            if (this.readonlyWallet === readonlyWallet ||
                (((_c = this.readonlyWallet) === null || _c === void 0 ? void 0 : _c.terraAddress) === readonlyWallet.terraAddress &&
                    this.readonlyWallet.network === readonlyWallet.network)) {
                return;
            }
            if (this.readonlyWallet) {
                this.readonlyWallet.disconnect();
            }
            this.readonlyWallet = readonlyWallet;
            this.updateStates({
                status: wallet_types_1.WalletStatus.WALLET_CONNECTED,
                network: readonlyWallet.network,
                wallets: [
                    {
                        connectType: wallet_types_1.ConnectType.READONLY,
                        terraAddress: readonlyWallet.terraAddress,
                        design: 'readonly',
                    },
                ],
                supportFeatures: EMPTY_SUPPORT_FEATURES,
                connection: CONNECTIONS.READONLY,
            });
            this.disableReadonlyWallet = () => {
                readonlyWallet.disconnect();
                this.readonlyWallet = null;
                this.disableReadonlyWallet = null;
            };
        };
        this.enableExtension = () => {
            var _a, _b;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);
            if (this.disableExtension || !this.extension) {
                return;
            }
            const extensionSubscription = this.extension.states().subscribe({
                next: (extensionStates) => {
                    if (extensionStates.type === extension_router_1.ExtensionRouterStatus.WALLET_CONNECTED &&
                        terra_js_1.AccAddress.validate(extensionStates.wallet.terraAddress)) {
                        this.updateStates({
                            status: wallet_types_1.WalletStatus.WALLET_CONNECTED,
                            network: extensionStates.network,
                            wallets: [
                                {
                                    connectType: wallet_types_1.ConnectType.EXTENSION,
                                    terraAddress: extensionStates.wallet.terraAddress,
                                    design: extensionStates.wallet.design,
                                },
                            ],
                            supportFeatures: extensionStates.supportFeatures,
                            connection: memoConnection(wallet_types_1.ConnectType.EXTENSION, extensionStates.extensionInfo.name, extensionStates.extensionInfo.icon, extensionStates.extensionInfo.identifier),
                        });
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                },
            });
            this.disableExtension = () => {
                var _a;
                (_a = this.extension) === null || _a === void 0 ? void 0 : _a.disconnect();
                extensionSubscription.unsubscribe();
                this.disableExtension = null;
            };
        };
        this.enableWalletConnect = (walletConnect) => {
            var _a, _b;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            if (this.walletConnect === walletConnect) {
                return;
            }
            if (this.walletConnect) {
                this.walletConnect.disconnect();
            }
            this.walletConnect = walletConnect;
            const subscribeWalletConnect = (wc) => {
                return wc.session().subscribe({
                    next: (status) => {
                        var _a;
                        switch (status.status) {
                            case walletconnect_1.WalletConnectSessionStatus.CONNECTED:
                                this.updateStates({
                                    status: wallet_types_1.WalletStatus.WALLET_CONNECTED,
                                    network: (_a = this.options.walletConnectChainIds[status.chainId]) !== null && _a !== void 0 ? _a : this.options.defaultNetwork,
                                    wallets: [
                                        {
                                            connectType: wallet_types_1.ConnectType.WALLETCONNECT,
                                            terraAddress: status.terraAddress,
                                            design: 'walletconnect',
                                        },
                                    ],
                                    supportFeatures: WALLETCONNECT_SUPPORT_FEATURES,
                                    connection: CONNECTIONS.WALLETCONNECT,
                                });
                                break;
                            default:
                                this.updateStates(this._notConnected);
                                break;
                        }
                    },
                });
            };
            const walletConnectSessionSubscription = subscribeWalletConnect(walletConnect);
            this.disableWalletConnect = () => {
                var _a;
                (_a = this.walletConnect) === null || _a === void 0 ? void 0 : _a.disconnect();
                this.walletConnect = null;
                walletConnectSessionSubscription.unsubscribe();
                this.disableWalletConnect = null;
            };
        };
        this.enableWalletPlugin = (plugin, session) => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableWalletConnect) === null || _c === void 0 ? void 0 : _c.call(this);
            this.plugin = session;
            this.updateStates({
                status: wallet_types_1.WalletStatus.WALLET_CONNECTED,
                network: session.network,
                wallets: [
                    {
                        connectType: wallet_types_1.ConnectType.PLUGINS,
                        terraAddress: session.terraAddress || 'not created',
                        metadata: session.getMetadata && session.getMetadata(),
                    },
                ],
                supportFeatures: WALLETCONNECT_SUPPORT_FEATURES,
                connection: memoConnection(wallet_types_1.ConnectType.PLUGINS, plugin.name, plugin.icon),
            });
            this.disableWalletPlugin = () => {
                var _a;
                this.disableWalletPlugin = null;
                (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.disconnect();
                this.plugin = null;
            };
        };
        this._notConnected = {
            status: wallet_types_1.WalletStatus.WALLET_NOT_CONNECTED,
            network: options.defaultNetwork,
        };
        this._initializing = {
            status: wallet_types_1.WalletStatus.INITIALIZING,
            network: options.defaultNetwork,
        };
        const defaultConnectionTypes = [
            wallet_types_1.ConnectType.READONLY,
            wallet_types_1.ConnectType.WALLETCONNECT,
        ];
        if (this.options.plugins) {
            defaultConnectionTypes.push(wallet_types_1.ConnectType.PLUGINS);
        }
        this._availableConnectTypes = new rxjs_1.BehaviorSubject(defaultConnectionTypes);
        this._availableInstallTypes = new rxjs_1.BehaviorSubject([]);
        this._states = new rxjs_1.BehaviorSubject(this._initializing);
        let numSessionCheck = 0;
        // wait checking the availability of the chrome extension
        // 0. check if extension wallet session is exists
        (0, checkExtensionReady_1.checkExtensionReady)((_a = options.waitingChromeExtensionInstallCheck) !== null && _a !== void 0 ? _a : DEFAULT_WAITING_CHROME_EXTENSION_INSTALL_CHECK, this.isChromeExtensionCompatibleBrowser()).then((ready) => {
            var _a;
            if (ready) {
                this._availableConnectTypes.next([
                    wallet_types_1.ConnectType.EXTENSION,
                    ...defaultConnectionTypes,
                ]);
                this.extension = new extension_router_1.ExtensionRouter({
                    hostWindow: window,
                    selectExtension: options.selectExtension,
                    dangerously__chromeExtensionCompatibleBrowserCheck: (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : env_1.DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK,
                    defaultNetwork: options.defaultNetwork,
                });
                const subscription = this.extension
                    .states()
                    .pipe((0, operators_1.filter)(({ type }) => type !== extension_router_1.ExtensionRouterStatus.INITIALIZING))
                    .subscribe((extensionStates) => {
                    try {
                        subscription.unsubscribe();
                    }
                    catch (_a) { }
                    if (extensionStates.type === extension_router_1.ExtensionRouterStatus.WALLET_CONNECTED &&
                        !this.disableWalletConnect &&
                        !this.disableReadonlyWallet) {
                        this.enableExtension();
                    }
                    else if (numSessionCheck === 0) {
                        numSessionCheck += 1;
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                });
            }
            else {
                if ((0, browser_check_1.isDesktopChrome)(this.isChromeExtensionCompatibleBrowser())) {
                    this._availableInstallTypes.next([wallet_types_1.ConnectType.EXTENSION]);
                }
                if (numSessionCheck === 0) {
                    numSessionCheck += 1;
                }
                else {
                    this.updateStates(this._notConnected);
                }
            }
        });
        // 1. check if readonly wallet session is exists
        const draftReadonlyWallet = (0, readonly_wallet_1.connectIfSessionExists)();
        if (draftReadonlyWallet) {
            this.enableReadonlyWallet(draftReadonlyWallet);
            return;
        }
        // 2. check if walletconnect sesison is exists
        const draftWalletConnect = (0, walletconnect_1.connectIfSessionExists)(options);
        if (draftWalletConnect &&
            draftWalletConnect.getLatestSession().status ===
                walletconnect_1.WalletConnectSessionStatus.CONNECTED) {
            this.enableWalletConnect(draftWalletConnect);
        }
        else if (numSessionCheck === 0) {
            numSessionCheck += 1;
        }
        else {
            this.updateStates(this._notConnected);
        }
    }
}
exports.WalletController = WalletController;
const memoizedConnections = new Map();
function memoConnection(connectType, name, icon, identifier = '') {
    const key = [connectType, name, icon, identifier].join(';');
    if (memoizedConnections.has(key)) {
        return memoizedConnections.get(key);
    }
    const connection = {
        type: connectType,
        name,
        icon,
        identifier,
    };
    memoizedConnections.set(key, connection);
    return connection;
}
//# sourceMappingURL=data:application/json;base64,
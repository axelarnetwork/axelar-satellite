"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapWalletConnectSignBytesError = exports.mapWalletConnectError = void 0;
const wallet_types_1 = require("@terra-money/wallet-types");
const walletconnect_1 = require("../modules/walletconnect");
const isError_1 = require("./isError");
function mapWalletConnectError(tx, error) {
    if ((0, isError_1.isError)(error, wallet_types_1.UserDenied) ||
        (0, isError_1.isError)(error, wallet_types_1.Timeout) ||
        (0, isError_1.isError)(error, wallet_types_1.CreateTxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectUserDenied)) {
        return new wallet_types_1.UserDenied();
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTimeout)) {
        return new wallet_types_1.Timeout(error.message);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectCreateTxFailed)) {
        return new wallet_types_1.CreateTxFailed(tx, error.message);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTxFailed)) {
        return new wallet_types_1.TxFailed(tx, error.txhash, error.message, null);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTxUnspecifiedError)) {
        return new wallet_types_1.TxUnspecifiedError(tx, error.message);
    }
    return new wallet_types_1.TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
exports.mapWalletConnectError = mapWalletConnectError;
function mapWalletConnectSignBytesError(bytes, error) {
    if ((0, isError_1.isError)(error, wallet_types_1.UserDenied) ||
        (0, isError_1.isError)(error, wallet_types_1.Timeout) ||
        (0, isError_1.isError)(error, wallet_types_1.SignBytesUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectUserDenied)) {
        return new wallet_types_1.UserDenied();
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectTimeout)) {
        return new wallet_types_1.Timeout(error.message);
    }
    else if ((0, isError_1.isError)(error, walletconnect_1.WalletConnectSignBytesUnspecifiedError)) {
        return new wallet_types_1.SignBytesUnspecifiedError(bytes, error.message);
    }
    return new wallet_types_1.SignBytesUnspecifiedError(bytes, error instanceof Error ? error.message : String(error));
}
exports.mapWalletConnectSignBytesError = mapWalletConnectSignBytesError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwV2FsbGV0Q29ubmVjdEVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtY29udHJvbGxlci9leGNlcHRpb24vbWFwV2FsbGV0Q29ubmVjdEVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDREQU9tQztBQUNuQyw0REFPa0M7QUFDbEMsdUNBQW9DO0FBRXBDLFNBQWdCLHFCQUFxQixDQUNuQyxFQUFtQixFQUNuQixLQUFjO0lBRWQsSUFDRSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHlCQUFVLENBQUM7UUFDMUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxzQkFBTyxDQUFDO1FBQ3ZCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsNkJBQWMsQ0FBQztRQUM5QixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHVCQUFRLENBQUM7UUFDeEIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxpQ0FBa0IsQ0FBQyxFQUNsQztRQUNBLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsdUNBQXVCLENBQUMsRUFBRTtRQUNsRCxPQUFPLElBQUkseUJBQVUsRUFBRSxDQUFDO0tBQ3pCO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLG9DQUFvQixDQUFDLEVBQUU7UUFDL0MsT0FBTyxJQUFJLHNCQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLDJDQUEyQixDQUFDLEVBQUU7UUFDdEQsT0FBTyxJQUFJLDZCQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxxQ0FBcUIsQ0FBQyxFQUFFO1FBQ2hELE9BQU8sSUFBSSx1QkFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUQ7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsK0NBQStCLENBQUMsRUFBRTtRQUMxRCxPQUFPLElBQUksaUNBQWtCLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNsRDtJQUNELE9BQU8sSUFBSSxpQ0FBa0IsQ0FDM0IsRUFBRSxFQUNGLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDdkQsQ0FBQztBQUNKLENBQUM7QUEzQkQsc0RBMkJDO0FBRUQsU0FBZ0IsOEJBQThCLENBQzVDLEtBQWEsRUFDYixLQUFjO0lBRWQsSUFDRSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHlCQUFVLENBQUM7UUFDMUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxzQkFBTyxDQUFDO1FBQ3ZCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsd0NBQXlCLENBQUMsRUFDekM7UUFDQSxPQUFPLEtBQUssQ0FBQztLQUNkO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHVDQUF1QixDQUFDLEVBQUU7UUFDbEQsT0FBTyxJQUFJLHlCQUFVLEVBQUUsQ0FBQztLQUN6QjtTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxvQ0FBb0IsQ0FBQyxFQUFFO1FBQy9DLE9BQU8sSUFBSSxzQkFBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNuQztTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxzREFBc0MsQ0FBQyxFQUFFO1FBQ2pFLE9BQU8sSUFBSSx3Q0FBeUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzVEO0lBQ0QsT0FBTyxJQUFJLHdDQUF5QixDQUNsQyxLQUFLLEVBQ0wsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO0FBQ0osQ0FBQztBQXJCRCx3RUFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDcmVhdGVUeE9wdGlvbnMgfSBmcm9tICdAdGVycmEtbW9uZXkvdGVycmEuanMnO1xuaW1wb3J0IHtcbiAgQ3JlYXRlVHhGYWlsZWQsXG4gIFRpbWVvdXQsXG4gIFR4RmFpbGVkLFxuICBUeFVuc3BlY2lmaWVkRXJyb3IsXG4gIFVzZXJEZW5pZWQsXG4gIFNpZ25CeXRlc1Vuc3BlY2lmaWVkRXJyb3Jcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3dhbGxldC10eXBlcyc7XG5pbXBvcnQge1xuICBXYWxsZXRDb25uZWN0Q3JlYXRlVHhGYWlsZWQsXG4gIFdhbGxldENvbm5lY3RUaW1lb3V0LFxuICBXYWxsZXRDb25uZWN0VHhGYWlsZWQsXG4gIFdhbGxldENvbm5lY3RUeFVuc3BlY2lmaWVkRXJyb3IsXG4gIFdhbGxldENvbm5lY3RVc2VyRGVuaWVkLFxuICBXYWxsZXRDb25uZWN0U2lnbkJ5dGVzVW5zcGVjaWZpZWRFcnJvcixcbn0gZnJvbSAnLi4vbW9kdWxlcy93YWxsZXRjb25uZWN0JztcbmltcG9ydCB7IGlzRXJyb3IgfSBmcm9tICcuL2lzRXJyb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFwV2FsbGV0Q29ubmVjdEVycm9yKFxuICB0eDogQ3JlYXRlVHhPcHRpb25zLFxuICBlcnJvcjogdW5rbm93bixcbik6IEVycm9yIHtcbiAgaWYgKFxuICAgIGlzRXJyb3IoZXJyb3IsIFVzZXJEZW5pZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVGltZW91dCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBDcmVhdGVUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeEZhaWxlZCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBUeFVuc3BlY2lmaWVkRXJyb3IpXG4gICkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0VXNlckRlbmllZCkpIHtcbiAgICByZXR1cm4gbmV3IFVzZXJEZW5pZWQoKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0VGltZW91dCkpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVvdXQoZXJyb3IubWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2FsbGV0Q29ubmVjdENyZWF0ZVR4RmFpbGVkKSkge1xuICAgIHJldHVybiBuZXcgQ3JlYXRlVHhGYWlsZWQodHgsIGVycm9yLm1lc3NhZ2UpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RUeEZhaWxlZCkpIHtcbiAgICByZXR1cm4gbmV3IFR4RmFpbGVkKHR4LCBlcnJvci50eGhhc2gsIGVycm9yLm1lc3NhZ2UsIG51bGwpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RUeFVuc3BlY2lmaWVkRXJyb3IpKSB7XG4gICAgcmV0dXJuIG5ldyBUeFVuc3BlY2lmaWVkRXJyb3IodHgsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBuZXcgVHhVbnNwZWNpZmllZEVycm9yKFxuICAgIHR4LFxuICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFdhbGxldENvbm5lY3RTaWduQnl0ZXNFcnJvcihcbiAgYnl0ZXM6IEJ1ZmZlcixcbiAgZXJyb3I6IHVua25vd24sXG4pOiBFcnJvciB7XG4gIGlmIChcbiAgICBpc0Vycm9yKGVycm9yLCBVc2VyRGVuaWVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFRpbWVvdXQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgU2lnbkJ5dGVzVW5zcGVjaWZpZWRFcnJvcilcbiAgKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RVc2VyRGVuaWVkKSkge1xuICAgIHJldHVybiBuZXcgVXNlckRlbmllZCgpO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdhbGxldENvbm5lY3RUaW1lb3V0KSkge1xuICAgIHJldHVybiBuZXcgVGltZW91dChlcnJvci5tZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXYWxsZXRDb25uZWN0U2lnbkJ5dGVzVW5zcGVjaWZpZWRFcnJvcikpIHtcbiAgICByZXR1cm4gbmV3IFNpZ25CeXRlc1Vuc3BlY2lmaWVkRXJyb3IoYnl0ZXMsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBuZXcgU2lnbkJ5dGVzVW5zcGVjaWZpZWRFcnJvcihcbiAgICBieXRlcyxcbiAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvciksXG4gICk7XG59XG4iXX0=
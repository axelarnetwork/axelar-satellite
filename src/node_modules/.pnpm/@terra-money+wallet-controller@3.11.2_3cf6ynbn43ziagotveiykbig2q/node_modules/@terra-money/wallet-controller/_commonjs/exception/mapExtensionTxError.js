"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapExtensionSignBytesError = exports.mapExtensionTxError = void 0;
const wallet_types_1 = require("@terra-money/wallet-types");
const web_extension_interface_1 = require("@terra-money/web-extension-interface");
const isError_1 = require("./isError");
function mapExtensionTxError(tx, error) {
    if ((0, isError_1.isError)(error, wallet_types_1.UserDenied) ||
        (0, isError_1.isError)(error, wallet_types_1.Timeout) ||
        (0, isError_1.isError)(error, wallet_types_1.SignBytesFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.CreateTxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionUserDenied)) {
        return new wallet_types_1.UserDenied();
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionCreateTxFailed)) {
        return new wallet_types_1.CreateTxFailed(tx, error.message);
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionTxFailed)) {
        return new wallet_types_1.TxFailed(tx, error.txhash, error.message, null);
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionTxUnspecifiedError)) {
        return new wallet_types_1.TxUnspecifiedError(tx, error.message);
    }
    return new wallet_types_1.TxUnspecifiedError(tx, error instanceof Error ? error.message : String(error));
}
exports.mapExtensionTxError = mapExtensionTxError;
function mapExtensionSignBytesError(bytes, error) {
    if ((0, isError_1.isError)(error, wallet_types_1.UserDenied) ||
        (0, isError_1.isError)(error, wallet_types_1.Timeout) ||
        (0, isError_1.isError)(error, wallet_types_1.SignBytesFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.CreateTxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxFailed) ||
        (0, isError_1.isError)(error, wallet_types_1.TxUnspecifiedError)) {
        return error;
    }
    else if ((0, isError_1.isError)(error, web_extension_interface_1.WebExtensionUserDenied)) {
        return new wallet_types_1.UserDenied();
    }
    return new wallet_types_1.SignBytesFailed(bytes, error instanceof Error ? error.message : String(error));
}
exports.mapExtensionSignBytesError = mapExtensionSignBytesError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwRXh0ZW5zaW9uVHhFcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LWNvbnRyb2xsZXIvZXhjZXB0aW9uL21hcEV4dGVuc2lvblR4RXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNERBT21DO0FBQ25DLGtGQUs4QztBQUU5Qyx1Q0FBb0M7QUFFcEMsU0FBZ0IsbUJBQW1CLENBQ2pDLEVBQW1CLEVBQ25CLEtBQWM7SUFFZCxJQUNFLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUseUJBQVUsQ0FBQztRQUMxQixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHNCQUFPLENBQUM7UUFDdkIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSw4QkFBZSxDQUFDO1FBQy9CLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsNkJBQWMsQ0FBQztRQUM5QixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHVCQUFRLENBQUM7UUFDeEIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxpQ0FBa0IsQ0FBQyxFQUNsQztRQUNBLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsZ0RBQXNCLENBQUMsRUFBRTtRQUNqRCxPQUFPLElBQUkseUJBQVUsRUFBRSxDQUFDO0tBQ3pCO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLG9EQUEwQixDQUFDLEVBQUU7UUFDckQsT0FBTyxJQUFJLDZCQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSw4Q0FBb0IsQ0FBQyxFQUFFO1FBQy9DLE9BQU8sSUFBSSx1QkFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUQ7U0FBTSxJQUFJLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsd0RBQThCLENBQUMsRUFBRTtRQUN6RCxPQUFPLElBQUksaUNBQWtCLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNsRDtJQUNELE9BQU8sSUFBSSxpQ0FBa0IsQ0FDM0IsRUFBRSxFQUNGLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDdkQsQ0FBQztBQUNKLENBQUM7QUExQkQsa0RBMEJDO0FBRUQsU0FBZ0IsMEJBQTBCLENBQ3hDLEtBQWEsRUFDYixLQUFjO0lBRWQsSUFDRSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLHlCQUFVLENBQUM7UUFDMUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSxzQkFBTyxDQUFDO1FBQ3ZCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsOEJBQWUsQ0FBQztRQUMvQixJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLDZCQUFjLENBQUM7UUFDOUIsSUFBQSxpQkFBTyxFQUFDLEtBQUssRUFBRSx1QkFBUSxDQUFDO1FBQ3hCLElBQUEsaUJBQU8sRUFBQyxLQUFLLEVBQUUsaUNBQWtCLENBQUMsRUFDbEM7UUFDQSxPQUFPLEtBQUssQ0FBQztLQUNkO1NBQU0sSUFBSSxJQUFBLGlCQUFPLEVBQUMsS0FBSyxFQUFFLGdEQUFzQixDQUFDLEVBQUU7UUFDakQsT0FBTyxJQUFJLHlCQUFVLEVBQUUsQ0FBQztLQUN6QjtJQUNELE9BQU8sSUFBSSw4QkFBZSxDQUN4QixLQUFLLEVBQ0wsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO0FBQ0osQ0FBQztBQXBCRCxnRUFvQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDcmVhdGVUeEZhaWxlZCxcbiAgU2lnbkJ5dGVzRmFpbGVkLFxuICBUaW1lb3V0LFxuICBUeEZhaWxlZCxcbiAgVHhVbnNwZWNpZmllZEVycm9yLFxuICBVc2VyRGVuaWVkLFxufSBmcm9tICdAdGVycmEtbW9uZXkvd2FsbGV0LXR5cGVzJztcbmltcG9ydCB7XG4gIFdlYkV4dGVuc2lvbkNyZWF0ZVR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeEZhaWxlZCxcbiAgV2ViRXh0ZW5zaW9uVHhVbnNwZWNpZmllZEVycm9yLFxuICBXZWJFeHRlbnNpb25Vc2VyRGVuaWVkLFxufSBmcm9tICdAdGVycmEtbW9uZXkvd2ViLWV4dGVuc2lvbi1pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7IGlzRXJyb3IgfSBmcm9tICcuL2lzRXJyb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFwRXh0ZW5zaW9uVHhFcnJvcihcbiAgdHg6IENyZWF0ZVR4T3B0aW9ucyxcbiAgZXJyb3I6IHVua25vd24sXG4pOiBFcnJvciB7XG4gIGlmIChcbiAgICBpc0Vycm9yKGVycm9yLCBVc2VyRGVuaWVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFRpbWVvdXQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgU2lnbkJ5dGVzRmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIENyZWF0ZVR4RmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFR4RmFpbGVkKSB8fFxuICAgIGlzRXJyb3IoZXJyb3IsIFR4VW5zcGVjaWZpZWRFcnJvcilcbiAgKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IGVsc2UgaWYgKGlzRXJyb3IoZXJyb3IsIFdlYkV4dGVuc2lvblVzZXJEZW5pZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBVc2VyRGVuaWVkKCk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBDcmVhdGVUeEZhaWxlZCh0eCwgZXJyb3IubWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uVHhGYWlsZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBUeEZhaWxlZCh0eCwgZXJyb3IudHhoYXNoLCBlcnJvci5tZXNzYWdlLCBudWxsKTtcbiAgfSBlbHNlIGlmIChpc0Vycm9yKGVycm9yLCBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3IpKSB7XG4gICAgcmV0dXJuIG5ldyBUeFVuc3BlY2lmaWVkRXJyb3IodHgsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBuZXcgVHhVbnNwZWNpZmllZEVycm9yKFxuICAgIHR4LFxuICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcEV4dGVuc2lvblNpZ25CeXRlc0Vycm9yKFxuICBieXRlczogQnVmZmVyLFxuICBlcnJvcjogdW5rbm93bixcbik6IEVycm9yIHtcbiAgaWYgKFxuICAgIGlzRXJyb3IoZXJyb3IsIFVzZXJEZW5pZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVGltZW91dCkgfHxcbiAgICBpc0Vycm9yKGVycm9yLCBTaWduQnl0ZXNGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgQ3JlYXRlVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhGYWlsZWQpIHx8XG4gICAgaXNFcnJvcihlcnJvciwgVHhVbnNwZWNpZmllZEVycm9yKVxuICApIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0gZWxzZSBpZiAoaXNFcnJvcihlcnJvciwgV2ViRXh0ZW5zaW9uVXNlckRlbmllZCkpIHtcbiAgICByZXR1cm4gbmV3IFVzZXJEZW5pZWQoKTtcbiAgfVxuICByZXR1cm4gbmV3IFNpZ25CeXRlc0ZhaWxlZChcbiAgICBieXRlcyxcbiAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvciksXG4gICk7XG59XG4iXX0=
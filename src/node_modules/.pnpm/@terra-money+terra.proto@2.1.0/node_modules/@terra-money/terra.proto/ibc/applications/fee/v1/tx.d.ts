import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Fee, PacketFee } from "../../../../ibc/applications/fee/v1/fee";
import { PacketId } from "../../../../ibc/core/channel/v1/channel";
export declare const protobufPackage = "ibc.applications.fee.v1";
/** MsgRegisterCounterpartyAddress defines the request type for the RegisterCounterpartyAddress rpc */
export interface MsgRegisterCounterpartyAddress {
    /** the relayer address */
    address: string;
    /** the counterparty relayer address */
    counterpartyAddress: string;
    /** unique channel identifier */
    channelId: string;
}
/** MsgRegisterCounterpartyAddressResponse defines the response type for the RegisterCounterpartyAddress rpc */
export interface MsgRegisterCounterpartyAddressResponse {
}
/**
 * MsgPayPacketFee defines the request type for the PayPacketFee rpc
 * This Msg can be used to pay for a packet at the next sequence send & should be combined with the Msg that will be
 * paid for
 */
export interface MsgPayPacketFee {
    /** fee encapsulates the recv, ack and timeout fees associated with an IBC packet */
    fee?: Fee;
    /** the source port unique identifier */
    sourcePortId: string;
    /** the source channel unique identifer */
    sourceChannelId: string;
    /** account address to refund fee if necessary */
    signer: string;
    /** optional list of relayers permitted to the receive packet fees */
    relayers: string[];
}
/** MsgPayPacketFeeResponse defines the response type for the PayPacketFee rpc */
export interface MsgPayPacketFeeResponse {
}
/**
 * MsgPayPacketFeeAsync defines the request type for the PayPacketFeeAsync rpc
 * This Msg can be used to pay for a packet at a specified sequence (instead of the next sequence send)
 */
export interface MsgPayPacketFeeAsync {
    /** unique packet identifier comprised of the channel ID, port ID and sequence */
    packetId?: PacketId;
    /** the packet fee associated with a particular IBC packet */
    packetFee?: PacketFee;
}
/** MsgPayPacketFeeAsyncResponse defines the response type for the PayPacketFeeAsync rpc */
export interface MsgPayPacketFeeAsyncResponse {
}
export declare const MsgRegisterCounterpartyAddress: {
    encode(message: MsgRegisterCounterpartyAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRegisterCounterpartyAddress;
    fromJSON(object: any): MsgRegisterCounterpartyAddress;
    toJSON(message: MsgRegisterCounterpartyAddress): unknown;
    fromPartial(object: DeepPartial<MsgRegisterCounterpartyAddress>): MsgRegisterCounterpartyAddress;
};
export declare const MsgRegisterCounterpartyAddressResponse: {
    encode(_: MsgRegisterCounterpartyAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRegisterCounterpartyAddressResponse;
    fromJSON(_: any): MsgRegisterCounterpartyAddressResponse;
    toJSON(_: MsgRegisterCounterpartyAddressResponse): unknown;
    fromPartial(_: DeepPartial<MsgRegisterCounterpartyAddressResponse>): MsgRegisterCounterpartyAddressResponse;
};
export declare const MsgPayPacketFee: {
    encode(message: MsgPayPacketFee, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgPayPacketFee;
    fromJSON(object: any): MsgPayPacketFee;
    toJSON(message: MsgPayPacketFee): unknown;
    fromPartial(object: DeepPartial<MsgPayPacketFee>): MsgPayPacketFee;
};
export declare const MsgPayPacketFeeResponse: {
    encode(_: MsgPayPacketFeeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgPayPacketFeeResponse;
    fromJSON(_: any): MsgPayPacketFeeResponse;
    toJSON(_: MsgPayPacketFeeResponse): unknown;
    fromPartial(_: DeepPartial<MsgPayPacketFeeResponse>): MsgPayPacketFeeResponse;
};
export declare const MsgPayPacketFeeAsync: {
    encode(message: MsgPayPacketFeeAsync, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgPayPacketFeeAsync;
    fromJSON(object: any): MsgPayPacketFeeAsync;
    toJSON(message: MsgPayPacketFeeAsync): unknown;
    fromPartial(object: DeepPartial<MsgPayPacketFeeAsync>): MsgPayPacketFeeAsync;
};
export declare const MsgPayPacketFeeAsyncResponse: {
    encode(_: MsgPayPacketFeeAsyncResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgPayPacketFeeAsyncResponse;
    fromJSON(_: any): MsgPayPacketFeeAsyncResponse;
    toJSON(_: MsgPayPacketFeeAsyncResponse): unknown;
    fromPartial(_: DeepPartial<MsgPayPacketFeeAsyncResponse>): MsgPayPacketFeeAsyncResponse;
};
/** Msg defines the ICS29 Msg service. */
export interface Msg {
    /**
     * RegisterCounterpartyAddress defines a rpc handler method for MsgRegisterCounterpartyAddress
     * RegisterCounterpartyAddress is called by the relayer on each channelEnd and allows them to specify their
     * counterparty address before relaying. This ensures they will be properly compensated for forward relaying since
     * destination chain must send back relayer's source address (counterparty address) in acknowledgement. This function
     * may be called more than once by a relayer, in which case, latest counterparty address is always used.
     */
    RegisterCounterpartyAddress(request: DeepPartial<MsgRegisterCounterpartyAddress>, metadata?: grpc.Metadata): Promise<MsgRegisterCounterpartyAddressResponse>;
    /**
     * PayPacketFee defines a rpc handler method for MsgPayPacketFee
     * PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
     * incentivize the relaying of the packet at the next sequence
     * NOTE: This method is intended to be used within a multi msg transaction, where the subsequent msg that follows
     * initiates the lifecycle of the incentivized packet
     */
    PayPacketFee(request: DeepPartial<MsgPayPacketFee>, metadata?: grpc.Metadata): Promise<MsgPayPacketFeeResponse>;
    /**
     * PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
     * PayPacketFeeAsync is an open callback that may be called by any module/user that wishes to escrow funds in order to
     * incentivize the relaying of a known packet (i.e. at a particular sequence)
     */
    PayPacketFeeAsync(request: DeepPartial<MsgPayPacketFeeAsync>, metadata?: grpc.Metadata): Promise<MsgPayPacketFeeAsyncResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    RegisterCounterpartyAddress(request: DeepPartial<MsgRegisterCounterpartyAddress>, metadata?: grpc.Metadata): Promise<MsgRegisterCounterpartyAddressResponse>;
    PayPacketFee(request: DeepPartial<MsgPayPacketFee>, metadata?: grpc.Metadata): Promise<MsgPayPacketFeeResponse>;
    PayPacketFeeAsync(request: DeepPartial<MsgPayPacketFeeAsync>, metadata?: grpc.Metadata): Promise<MsgPayPacketFeeAsyncResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgRegisterCounterpartyAddressDesc: UnaryMethodDefinitionish;
export declare const MsgPayPacketFeeDesc: UnaryMethodDefinitionish;
export declare const MsgPayPacketFeeAsyncDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};

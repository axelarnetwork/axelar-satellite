"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.MsgPayPacketFeeAsyncDesc = exports.MsgPayPacketFeeDesc = exports.MsgRegisterCounterpartyAddressDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgPayPacketFeeAsyncResponse = exports.MsgPayPacketFeeAsync = exports.MsgPayPacketFeeResponse = exports.MsgPayPacketFee = exports.MsgRegisterCounterpartyAddressResponse = exports.MsgRegisterCounterpartyAddress = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const fee_1 = require("../../../../ibc/applications/fee/v1/fee");
const channel_1 = require("../../../../ibc/core/channel/v1/channel");
const browser_headers_1 = require("browser-headers");
exports.protobufPackage = "ibc.applications.fee.v1";
const baseMsgRegisterCounterpartyAddress = { address: "", counterpartyAddress: "", channelId: "" };
exports.MsgRegisterCounterpartyAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.counterpartyAddress !== "") {
            writer.uint32(18).string(message.counterpartyAddress);
        }
        if (message.channelId !== "") {
            writer.uint32(26).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgRegisterCounterpartyAddress);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.counterpartyAddress = reader.string();
                    break;
                case 3:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgRegisterCounterpartyAddress);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.counterpartyAddress !== undefined && object.counterpartyAddress !== null) {
            message.counterpartyAddress = String(object.counterpartyAddress);
        }
        else {
            message.counterpartyAddress = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.counterpartyAddress !== undefined && (obj.counterpartyAddress = message.counterpartyAddress);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgRegisterCounterpartyAddress);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.counterpartyAddress !== undefined && object.counterpartyAddress !== null) {
            message.counterpartyAddress = object.counterpartyAddress;
        }
        else {
            message.counterpartyAddress = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        return message;
    },
};
const baseMsgRegisterCounterpartyAddressResponse = {};
exports.MsgRegisterCounterpartyAddressResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgRegisterCounterpartyAddressResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseMsgRegisterCounterpartyAddressResponse);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseMsgRegisterCounterpartyAddressResponse);
        return message;
    },
};
const baseMsgPayPacketFee = { sourcePortId: "", sourceChannelId: "", signer: "", relayers: "" };
exports.MsgPayPacketFee = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fee !== undefined) {
            fee_1.Fee.encode(message.fee, writer.uint32(10).fork()).ldelim();
        }
        if (message.sourcePortId !== "") {
            writer.uint32(18).string(message.sourcePortId);
        }
        if (message.sourceChannelId !== "") {
            writer.uint32(26).string(message.sourceChannelId);
        }
        if (message.signer !== "") {
            writer.uint32(34).string(message.signer);
        }
        for (const v of message.relayers) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgPayPacketFee);
        message.relayers = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fee = fee_1.Fee.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.sourcePortId = reader.string();
                    break;
                case 3:
                    message.sourceChannelId = reader.string();
                    break;
                case 4:
                    message.signer = reader.string();
                    break;
                case 5:
                    message.relayers.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgPayPacketFee);
        message.relayers = [];
        if (object.fee !== undefined && object.fee !== null) {
            message.fee = fee_1.Fee.fromJSON(object.fee);
        }
        else {
            message.fee = undefined;
        }
        if (object.sourcePortId !== undefined && object.sourcePortId !== null) {
            message.sourcePortId = String(object.sourcePortId);
        }
        else {
            message.sourcePortId = "";
        }
        if (object.sourceChannelId !== undefined && object.sourceChannelId !== null) {
            message.sourceChannelId = String(object.sourceChannelId);
        }
        else {
            message.sourceChannelId = "";
        }
        if (object.signer !== undefined && object.signer !== null) {
            message.signer = String(object.signer);
        }
        else {
            message.signer = "";
        }
        if (object.relayers !== undefined && object.relayers !== null) {
            for (const e of object.relayers) {
                message.relayers.push(String(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fee !== undefined && (obj.fee = message.fee ? fee_1.Fee.toJSON(message.fee) : undefined);
        message.sourcePortId !== undefined && (obj.sourcePortId = message.sourcePortId);
        message.sourceChannelId !== undefined && (obj.sourceChannelId = message.sourceChannelId);
        message.signer !== undefined && (obj.signer = message.signer);
        if (message.relayers) {
            obj.relayers = message.relayers.map((e) => e);
        }
        else {
            obj.relayers = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgPayPacketFee);
        message.relayers = [];
        if (object.fee !== undefined && object.fee !== null) {
            message.fee = fee_1.Fee.fromPartial(object.fee);
        }
        else {
            message.fee = undefined;
        }
        if (object.sourcePortId !== undefined && object.sourcePortId !== null) {
            message.sourcePortId = object.sourcePortId;
        }
        else {
            message.sourcePortId = "";
        }
        if (object.sourceChannelId !== undefined && object.sourceChannelId !== null) {
            message.sourceChannelId = object.sourceChannelId;
        }
        else {
            message.sourceChannelId = "";
        }
        if (object.signer !== undefined && object.signer !== null) {
            message.signer = object.signer;
        }
        else {
            message.signer = "";
        }
        if (object.relayers !== undefined && object.relayers !== null) {
            for (const e of object.relayers) {
                message.relayers.push(e);
            }
        }
        return message;
    },
};
const baseMsgPayPacketFeeResponse = {};
exports.MsgPayPacketFeeResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgPayPacketFeeResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseMsgPayPacketFeeResponse);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseMsgPayPacketFeeResponse);
        return message;
    },
};
const baseMsgPayPacketFeeAsync = {};
exports.MsgPayPacketFeeAsync = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(10).fork()).ldelim();
        }
        if (message.packetFee !== undefined) {
            fee_1.PacketFee.encode(message.packetFee, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgPayPacketFeeAsync);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.packetFee = fee_1.PacketFee.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgPayPacketFeeAsync);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromJSON(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        if (object.packetFee !== undefined && object.packetFee !== null) {
            message.packetFee = fee_1.PacketFee.fromJSON(object.packetFee);
        }
        else {
            message.packetFee = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.packetId !== undefined &&
            (obj.packetId = message.packetId ? channel_1.PacketId.toJSON(message.packetId) : undefined);
        message.packetFee !== undefined &&
            (obj.packetFee = message.packetFee ? fee_1.PacketFee.toJSON(message.packetFee) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgPayPacketFeeAsync);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromPartial(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        if (object.packetFee !== undefined && object.packetFee !== null) {
            message.packetFee = fee_1.PacketFee.fromPartial(object.packetFee);
        }
        else {
            message.packetFee = undefined;
        }
        return message;
    },
};
const baseMsgPayPacketFeeAsyncResponse = {};
exports.MsgPayPacketFeeAsyncResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgPayPacketFeeAsyncResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseMsgPayPacketFeeAsyncResponse);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseMsgPayPacketFeeAsyncResponse);
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.RegisterCounterpartyAddress = this.RegisterCounterpartyAddress.bind(this);
        this.PayPacketFee = this.PayPacketFee.bind(this);
        this.PayPacketFeeAsync = this.PayPacketFeeAsync.bind(this);
    }
    RegisterCounterpartyAddress(request, metadata) {
        return this.rpc.unary(exports.MsgRegisterCounterpartyAddressDesc, exports.MsgRegisterCounterpartyAddress.fromPartial(request), metadata);
    }
    PayPacketFee(request, metadata) {
        return this.rpc.unary(exports.MsgPayPacketFeeDesc, exports.MsgPayPacketFee.fromPartial(request), metadata);
    }
    PayPacketFeeAsync(request, metadata) {
        return this.rpc.unary(exports.MsgPayPacketFeeAsyncDesc, exports.MsgPayPacketFeeAsync.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = {
    serviceName: "ibc.applications.fee.v1.Msg",
};
exports.MsgRegisterCounterpartyAddressDesc = {
    methodName: "RegisterCounterpartyAddress",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgRegisterCounterpartyAddress.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgRegisterCounterpartyAddressResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgPayPacketFeeDesc = {
    methodName: "PayPacketFee",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgPayPacketFee.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgPayPacketFeeResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgPayPacketFeeAsyncDesc = {
    methodName: "PayPacketFeeAsync",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgPayPacketFeeAsync.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgPayPacketFeeAsyncResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=tx.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentifiedPacketFees = exports.PacketFees = exports.PacketFee = exports.Fee = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const channel_1 = require("../../../../ibc/core/channel/v1/channel");
const coin_1 = require("../../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "ibc.applications.fee.v1";
const baseFee = {};
exports.Fee = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.recvFee) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.ackFee) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.timeoutFee) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseFee);
        message.recvFee = [];
        message.ackFee = [];
        message.timeoutFee = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recvFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.ackFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.timeoutFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseFee);
        message.recvFee = [];
        message.ackFee = [];
        message.timeoutFee = [];
        if (object.recvFee !== undefined && object.recvFee !== null) {
            for (const e of object.recvFee) {
                message.recvFee.push(coin_1.Coin.fromJSON(e));
            }
        }
        if (object.ackFee !== undefined && object.ackFee !== null) {
            for (const e of object.ackFee) {
                message.ackFee.push(coin_1.Coin.fromJSON(e));
            }
        }
        if (object.timeoutFee !== undefined && object.timeoutFee !== null) {
            for (const e of object.timeoutFee) {
                message.timeoutFee.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.recvFee) {
            obj.recvFee = message.recvFee.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.recvFee = [];
        }
        if (message.ackFee) {
            obj.ackFee = message.ackFee.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.ackFee = [];
        }
        if (message.timeoutFee) {
            obj.timeoutFee = message.timeoutFee.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.timeoutFee = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseFee);
        message.recvFee = [];
        message.ackFee = [];
        message.timeoutFee = [];
        if (object.recvFee !== undefined && object.recvFee !== null) {
            for (const e of object.recvFee) {
                message.recvFee.push(coin_1.Coin.fromPartial(e));
            }
        }
        if (object.ackFee !== undefined && object.ackFee !== null) {
            for (const e of object.ackFee) {
                message.ackFee.push(coin_1.Coin.fromPartial(e));
            }
        }
        if (object.timeoutFee !== undefined && object.timeoutFee !== null) {
            for (const e of object.timeoutFee) {
                message.timeoutFee.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const basePacketFee = { refundAddress: "", relayers: "" };
exports.PacketFee = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fee !== undefined) {
            exports.Fee.encode(message.fee, writer.uint32(10).fork()).ldelim();
        }
        if (message.refundAddress !== "") {
            writer.uint32(18).string(message.refundAddress);
        }
        for (const v of message.relayers) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, basePacketFee);
        message.relayers = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fee = exports.Fee.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.refundAddress = reader.string();
                    break;
                case 3:
                    message.relayers.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, basePacketFee);
        message.relayers = [];
        if (object.fee !== undefined && object.fee !== null) {
            message.fee = exports.Fee.fromJSON(object.fee);
        }
        else {
            message.fee = undefined;
        }
        if (object.refundAddress !== undefined && object.refundAddress !== null) {
            message.refundAddress = String(object.refundAddress);
        }
        else {
            message.refundAddress = "";
        }
        if (object.relayers !== undefined && object.relayers !== null) {
            for (const e of object.relayers) {
                message.relayers.push(String(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fee !== undefined && (obj.fee = message.fee ? exports.Fee.toJSON(message.fee) : undefined);
        message.refundAddress !== undefined && (obj.refundAddress = message.refundAddress);
        if (message.relayers) {
            obj.relayers = message.relayers.map((e) => e);
        }
        else {
            obj.relayers = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, basePacketFee);
        message.relayers = [];
        if (object.fee !== undefined && object.fee !== null) {
            message.fee = exports.Fee.fromPartial(object.fee);
        }
        else {
            message.fee = undefined;
        }
        if (object.refundAddress !== undefined && object.refundAddress !== null) {
            message.refundAddress = object.refundAddress;
        }
        else {
            message.refundAddress = "";
        }
        if (object.relayers !== undefined && object.relayers !== null) {
            for (const e of object.relayers) {
                message.relayers.push(e);
            }
        }
        return message;
    },
};
const basePacketFees = {};
exports.PacketFees = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.packetFees) {
            exports.PacketFee.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, basePacketFees);
        message.packetFees = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetFees.push(exports.PacketFee.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, basePacketFees);
        message.packetFees = [];
        if (object.packetFees !== undefined && object.packetFees !== null) {
            for (const e of object.packetFees) {
                message.packetFees.push(exports.PacketFee.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.packetFees) {
            obj.packetFees = message.packetFees.map((e) => (e ? exports.PacketFee.toJSON(e) : undefined));
        }
        else {
            obj.packetFees = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, basePacketFees);
        message.packetFees = [];
        if (object.packetFees !== undefined && object.packetFees !== null) {
            for (const e of object.packetFees) {
                message.packetFees.push(exports.PacketFee.fromPartial(e));
            }
        }
        return message;
    },
};
const baseIdentifiedPacketFees = {};
exports.IdentifiedPacketFees = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.packetFees) {
            exports.PacketFee.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseIdentifiedPacketFees);
        message.packetFees = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.packetFees.push(exports.PacketFee.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseIdentifiedPacketFees);
        message.packetFees = [];
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromJSON(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        if (object.packetFees !== undefined && object.packetFees !== null) {
            for (const e of object.packetFees) {
                message.packetFees.push(exports.PacketFee.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.packetId !== undefined &&
            (obj.packetId = message.packetId ? channel_1.PacketId.toJSON(message.packetId) : undefined);
        if (message.packetFees) {
            obj.packetFees = message.packetFees.map((e) => (e ? exports.PacketFee.toJSON(e) : undefined));
        }
        else {
            obj.packetFees = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseIdentifiedPacketFees);
        message.packetFees = [];
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromPartial(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        if (object.packetFees !== undefined && object.packetFees !== null) {
            for (const e of object.packetFees) {
                message.packetFees.push(exports.PacketFee.fromPartial(e));
            }
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=fee.js.map
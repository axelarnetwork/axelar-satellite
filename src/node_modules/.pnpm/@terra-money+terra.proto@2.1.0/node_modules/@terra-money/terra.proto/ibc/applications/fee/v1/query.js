"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.QueryFeeEnabledChannelDesc = exports.QueryFeeEnabledChannelsDesc = exports.QueryCounterpartyAddressDesc = exports.QueryTotalTimeoutFeesDesc = exports.QueryTotalAckFeesDesc = exports.QueryTotalRecvFeesDesc = exports.QueryIncentivizedPacketsForChannelDesc = exports.QueryIncentivizedPacketDesc = exports.QueryIncentivizedPacketsDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryFeeEnabledChannelResponse = exports.QueryFeeEnabledChannelRequest = exports.QueryFeeEnabledChannelsResponse = exports.QueryFeeEnabledChannelsRequest = exports.QueryCounterpartyAddressResponse = exports.QueryCounterpartyAddressRequest = exports.QueryTotalTimeoutFeesResponse = exports.QueryTotalTimeoutFeesRequest = exports.QueryTotalAckFeesResponse = exports.QueryTotalAckFeesRequest = exports.QueryTotalRecvFeesResponse = exports.QueryTotalRecvFeesRequest = exports.QueryIncentivizedPacketsForChannelResponse = exports.QueryIncentivizedPacketsForChannelRequest = exports.QueryIncentivizedPacketResponse = exports.QueryIncentivizedPacketRequest = exports.QueryIncentivizedPacketsResponse = exports.QueryIncentivizedPacketsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const pagination_1 = require("../../../../cosmos/base/query/v1beta1/pagination");
const channel_1 = require("../../../../ibc/core/channel/v1/channel");
const fee_1 = require("../../../../ibc/applications/fee/v1/fee");
const browser_headers_1 = require("browser-headers");
const coin_1 = require("../../../../cosmos/base/v1beta1/coin");
const genesis_1 = require("../../../../ibc/applications/fee/v1/genesis");
exports.protobufPackage = "ibc.applications.fee.v1";
const baseQueryIncentivizedPacketsRequest = { queryHeight: long_1.default.UZERO };
exports.QueryIncentivizedPacketsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (!message.queryHeight.isZero()) {
            writer.uint32(16).uint64(message.queryHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIncentivizedPacketsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.queryHeight = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = long_1.default.fromString(object.queryHeight);
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.queryHeight !== undefined && (obj.queryHeight = (message.queryHeight || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = object.queryHeight;
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryIncentivizedPacketsResponse = {};
exports.QueryIncentivizedPacketsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.incentivizedPackets) {
            fee_1.IdentifiedPacketFees.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIncentivizedPacketsResponse);
        message.incentivizedPackets = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.incentivizedPackets.push(fee_1.IdentifiedPacketFees.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsResponse);
        message.incentivizedPackets = [];
        if (object.incentivizedPackets !== undefined && object.incentivizedPackets !== null) {
            for (const e of object.incentivizedPackets) {
                message.incentivizedPackets.push(fee_1.IdentifiedPacketFees.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.incentivizedPackets) {
            obj.incentivizedPackets = message.incentivizedPackets.map((e) => e ? fee_1.IdentifiedPacketFees.toJSON(e) : undefined);
        }
        else {
            obj.incentivizedPackets = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsResponse);
        message.incentivizedPackets = [];
        if (object.incentivizedPackets !== undefined && object.incentivizedPackets !== null) {
            for (const e of object.incentivizedPackets) {
                message.incentivizedPackets.push(fee_1.IdentifiedPacketFees.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryIncentivizedPacketRequest = { queryHeight: long_1.default.UZERO };
exports.QueryIncentivizedPacketRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(10).fork()).ldelim();
        }
        if (!message.queryHeight.isZero()) {
            writer.uint32(16).uint64(message.queryHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIncentivizedPacketRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.queryHeight = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromJSON(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = long_1.default.fromString(object.queryHeight);
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.packetId !== undefined &&
            (obj.packetId = message.packetId ? channel_1.PacketId.toJSON(message.packetId) : undefined);
        message.queryHeight !== undefined && (obj.queryHeight = (message.queryHeight || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromPartial(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = object.queryHeight;
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryIncentivizedPacketResponse = {};
exports.QueryIncentivizedPacketResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.incentivizedPacket !== undefined) {
            fee_1.IdentifiedPacketFees.encode(message.incentivizedPacket, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIncentivizedPacketResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.incentivizedPacket = fee_1.IdentifiedPacketFees.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketResponse);
        if (object.incentivizedPacket !== undefined && object.incentivizedPacket !== null) {
            message.incentivizedPacket = fee_1.IdentifiedPacketFees.fromJSON(object.incentivizedPacket);
        }
        else {
            message.incentivizedPacket = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.incentivizedPacket !== undefined &&
            (obj.incentivizedPacket = message.incentivizedPacket
                ? fee_1.IdentifiedPacketFees.toJSON(message.incentivizedPacket)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketResponse);
        if (object.incentivizedPacket !== undefined && object.incentivizedPacket !== null) {
            message.incentivizedPacket = fee_1.IdentifiedPacketFees.fromPartial(object.incentivizedPacket);
        }
        else {
            message.incentivizedPacket = undefined;
        }
        return message;
    },
};
const baseQueryIncentivizedPacketsForChannelRequest = {
    portId: "",
    channelId: "",
    queryHeight: long_1.default.UZERO,
};
exports.QueryIncentivizedPacketsForChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.portId !== "") {
            writer.uint32(18).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(26).string(message.channelId);
        }
        if (!message.queryHeight.isZero()) {
            writer.uint32(32).uint64(message.queryHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIncentivizedPacketsForChannelRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.portId = reader.string();
                    break;
                case 3:
                    message.channelId = reader.string();
                    break;
                case 4:
                    message.queryHeight = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsForChannelRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = String(object.portId);
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = long_1.default.fromString(object.queryHeight);
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.queryHeight !== undefined && (obj.queryHeight = (message.queryHeight || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsForChannelRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = object.portId;
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = object.queryHeight;
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryIncentivizedPacketsForChannelResponse = {};
exports.QueryIncentivizedPacketsForChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.incentivizedPackets) {
            fee_1.IdentifiedPacketFees.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIncentivizedPacketsForChannelResponse);
        message.incentivizedPackets = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.incentivizedPackets.push(fee_1.IdentifiedPacketFees.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsForChannelResponse);
        message.incentivizedPackets = [];
        if (object.incentivizedPackets !== undefined && object.incentivizedPackets !== null) {
            for (const e of object.incentivizedPackets) {
                message.incentivizedPackets.push(fee_1.IdentifiedPacketFees.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.incentivizedPackets) {
            obj.incentivizedPackets = message.incentivizedPackets.map((e) => e ? fee_1.IdentifiedPacketFees.toJSON(e) : undefined);
        }
        else {
            obj.incentivizedPackets = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIncentivizedPacketsForChannelResponse);
        message.incentivizedPackets = [];
        if (object.incentivizedPackets !== undefined && object.incentivizedPackets !== null) {
            for (const e of object.incentivizedPackets) {
                message.incentivizedPackets.push(fee_1.IdentifiedPacketFees.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryTotalRecvFeesRequest = {};
exports.QueryTotalRecvFeesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalRecvFeesRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalRecvFeesRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromJSON(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.packetId !== undefined &&
            (obj.packetId = message.packetId ? channel_1.PacketId.toJSON(message.packetId) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalRecvFeesRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromPartial(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
};
const baseQueryTotalRecvFeesResponse = {};
exports.QueryTotalRecvFeesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.recvFees) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalRecvFeesResponse);
        message.recvFees = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recvFees.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalRecvFeesResponse);
        message.recvFees = [];
        if (object.recvFees !== undefined && object.recvFees !== null) {
            for (const e of object.recvFees) {
                message.recvFees.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.recvFees) {
            obj.recvFees = message.recvFees.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.recvFees = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalRecvFeesResponse);
        message.recvFees = [];
        if (object.recvFees !== undefined && object.recvFees !== null) {
            for (const e of object.recvFees) {
                message.recvFees.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryTotalAckFeesRequest = {};
exports.QueryTotalAckFeesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalAckFeesRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalAckFeesRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromJSON(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.packetId !== undefined &&
            (obj.packetId = message.packetId ? channel_1.PacketId.toJSON(message.packetId) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalAckFeesRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromPartial(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
};
const baseQueryTotalAckFeesResponse = {};
exports.QueryTotalAckFeesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.ackFees) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalAckFeesResponse);
        message.ackFees = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ackFees.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalAckFeesResponse);
        message.ackFees = [];
        if (object.ackFees !== undefined && object.ackFees !== null) {
            for (const e of object.ackFees) {
                message.ackFees.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.ackFees) {
            obj.ackFees = message.ackFees.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.ackFees = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalAckFeesResponse);
        message.ackFees = [];
        if (object.ackFees !== undefined && object.ackFees !== null) {
            for (const e of object.ackFees) {
                message.ackFees.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryTotalTimeoutFeesRequest = {};
exports.QueryTotalTimeoutFeesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalTimeoutFeesRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalTimeoutFeesRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromJSON(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.packetId !== undefined &&
            (obj.packetId = message.packetId ? channel_1.PacketId.toJSON(message.packetId) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalTimeoutFeesRequest);
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromPartial(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
};
const baseQueryTotalTimeoutFeesResponse = {};
exports.QueryTotalTimeoutFeesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.timeoutFees) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalTimeoutFeesResponse);
        message.timeoutFees = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timeoutFees.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalTimeoutFeesResponse);
        message.timeoutFees = [];
        if (object.timeoutFees !== undefined && object.timeoutFees !== null) {
            for (const e of object.timeoutFees) {
                message.timeoutFees.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.timeoutFees) {
            obj.timeoutFees = message.timeoutFees.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.timeoutFees = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalTimeoutFeesResponse);
        message.timeoutFees = [];
        if (object.timeoutFees !== undefined && object.timeoutFees !== null) {
            for (const e of object.timeoutFees) {
                message.timeoutFees.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryCounterpartyAddressRequest = { channelId: "", relayerAddress: "" };
exports.QueryCounterpartyAddressRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channelId !== "") {
            writer.uint32(10).string(message.channelId);
        }
        if (message.relayerAddress !== "") {
            writer.uint32(18).string(message.relayerAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryCounterpartyAddressRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.channelId = reader.string();
                    break;
                case 2:
                    message.relayerAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryCounterpartyAddressRequest);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.relayerAddress !== undefined && object.relayerAddress !== null) {
            message.relayerAddress = String(object.relayerAddress);
        }
        else {
            message.relayerAddress = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.relayerAddress !== undefined && (obj.relayerAddress = message.relayerAddress);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryCounterpartyAddressRequest);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.relayerAddress !== undefined && object.relayerAddress !== null) {
            message.relayerAddress = object.relayerAddress;
        }
        else {
            message.relayerAddress = "";
        }
        return message;
    },
};
const baseQueryCounterpartyAddressResponse = { counterpartyAddress: "" };
exports.QueryCounterpartyAddressResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.counterpartyAddress !== "") {
            writer.uint32(10).string(message.counterpartyAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryCounterpartyAddressResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.counterpartyAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryCounterpartyAddressResponse);
        if (object.counterpartyAddress !== undefined && object.counterpartyAddress !== null) {
            message.counterpartyAddress = String(object.counterpartyAddress);
        }
        else {
            message.counterpartyAddress = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.counterpartyAddress !== undefined && (obj.counterpartyAddress = message.counterpartyAddress);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryCounterpartyAddressResponse);
        if (object.counterpartyAddress !== undefined && object.counterpartyAddress !== null) {
            message.counterpartyAddress = object.counterpartyAddress;
        }
        else {
            message.counterpartyAddress = "";
        }
        return message;
    },
};
const baseQueryFeeEnabledChannelsRequest = { queryHeight: long_1.default.UZERO };
exports.QueryFeeEnabledChannelsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (!message.queryHeight.isZero()) {
            writer.uint32(16).uint64(message.queryHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryFeeEnabledChannelsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.queryHeight = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelsRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = long_1.default.fromString(object.queryHeight);
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.queryHeight !== undefined && (obj.queryHeight = (message.queryHeight || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelsRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        if (object.queryHeight !== undefined && object.queryHeight !== null) {
            message.queryHeight = object.queryHeight;
        }
        else {
            message.queryHeight = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryFeeEnabledChannelsResponse = {};
exports.QueryFeeEnabledChannelsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.feeEnabledChannels) {
            genesis_1.FeeEnabledChannel.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryFeeEnabledChannelsResponse);
        message.feeEnabledChannels = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.feeEnabledChannels.push(genesis_1.FeeEnabledChannel.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelsResponse);
        message.feeEnabledChannels = [];
        if (object.feeEnabledChannels !== undefined && object.feeEnabledChannels !== null) {
            for (const e of object.feeEnabledChannels) {
                message.feeEnabledChannels.push(genesis_1.FeeEnabledChannel.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.feeEnabledChannels) {
            obj.feeEnabledChannels = message.feeEnabledChannels.map((e) => e ? genesis_1.FeeEnabledChannel.toJSON(e) : undefined);
        }
        else {
            obj.feeEnabledChannels = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelsResponse);
        message.feeEnabledChannels = [];
        if (object.feeEnabledChannels !== undefined && object.feeEnabledChannels !== null) {
            for (const e of object.feeEnabledChannels) {
                message.feeEnabledChannels.push(genesis_1.FeeEnabledChannel.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryFeeEnabledChannelRequest = { portId: "", channelId: "" };
exports.QueryFeeEnabledChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.portId !== "") {
            writer.uint32(10).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(18).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryFeeEnabledChannelRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.portId = reader.string();
                    break;
                case 2:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelRequest);
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = String(object.portId);
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelRequest);
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = object.portId;
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        return message;
    },
};
const baseQueryFeeEnabledChannelResponse = { feeEnabled: false };
exports.QueryFeeEnabledChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.feeEnabled === true) {
            writer.uint32(8).bool(message.feeEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryFeeEnabledChannelResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.feeEnabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelResponse);
        if (object.feeEnabled !== undefined && object.feeEnabled !== null) {
            message.feeEnabled = Boolean(object.feeEnabled);
        }
        else {
            message.feeEnabled = false;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.feeEnabled !== undefined && (obj.feeEnabled = message.feeEnabled);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryFeeEnabledChannelResponse);
        if (object.feeEnabled !== undefined && object.feeEnabled !== null) {
            message.feeEnabled = object.feeEnabled;
        }
        else {
            message.feeEnabled = false;
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.IncentivizedPackets = this.IncentivizedPackets.bind(this);
        this.IncentivizedPacket = this.IncentivizedPacket.bind(this);
        this.IncentivizedPacketsForChannel = this.IncentivizedPacketsForChannel.bind(this);
        this.TotalRecvFees = this.TotalRecvFees.bind(this);
        this.TotalAckFees = this.TotalAckFees.bind(this);
        this.TotalTimeoutFees = this.TotalTimeoutFees.bind(this);
        this.CounterpartyAddress = this.CounterpartyAddress.bind(this);
        this.FeeEnabledChannels = this.FeeEnabledChannels.bind(this);
        this.FeeEnabledChannel = this.FeeEnabledChannel.bind(this);
    }
    IncentivizedPackets(request, metadata) {
        return this.rpc.unary(exports.QueryIncentivizedPacketsDesc, exports.QueryIncentivizedPacketsRequest.fromPartial(request), metadata);
    }
    IncentivizedPacket(request, metadata) {
        return this.rpc.unary(exports.QueryIncentivizedPacketDesc, exports.QueryIncentivizedPacketRequest.fromPartial(request), metadata);
    }
    IncentivizedPacketsForChannel(request, metadata) {
        return this.rpc.unary(exports.QueryIncentivizedPacketsForChannelDesc, exports.QueryIncentivizedPacketsForChannelRequest.fromPartial(request), metadata);
    }
    TotalRecvFees(request, metadata) {
        return this.rpc.unary(exports.QueryTotalRecvFeesDesc, exports.QueryTotalRecvFeesRequest.fromPartial(request), metadata);
    }
    TotalAckFees(request, metadata) {
        return this.rpc.unary(exports.QueryTotalAckFeesDesc, exports.QueryTotalAckFeesRequest.fromPartial(request), metadata);
    }
    TotalTimeoutFees(request, metadata) {
        return this.rpc.unary(exports.QueryTotalTimeoutFeesDesc, exports.QueryTotalTimeoutFeesRequest.fromPartial(request), metadata);
    }
    CounterpartyAddress(request, metadata) {
        return this.rpc.unary(exports.QueryCounterpartyAddressDesc, exports.QueryCounterpartyAddressRequest.fromPartial(request), metadata);
    }
    FeeEnabledChannels(request, metadata) {
        return this.rpc.unary(exports.QueryFeeEnabledChannelsDesc, exports.QueryFeeEnabledChannelsRequest.fromPartial(request), metadata);
    }
    FeeEnabledChannel(request, metadata) {
        return this.rpc.unary(exports.QueryFeeEnabledChannelDesc, exports.QueryFeeEnabledChannelRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = {
    serviceName: "ibc.applications.fee.v1.Query",
};
exports.QueryIncentivizedPacketsDesc = {
    methodName: "IncentivizedPackets",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryIncentivizedPacketsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryIncentivizedPacketsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryIncentivizedPacketDesc = {
    methodName: "IncentivizedPacket",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryIncentivizedPacketRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryIncentivizedPacketResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryIncentivizedPacketsForChannelDesc = {
    methodName: "IncentivizedPacketsForChannel",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryIncentivizedPacketsForChannelRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryIncentivizedPacketsForChannelResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTotalRecvFeesDesc = {
    methodName: "TotalRecvFees",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTotalRecvFeesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTotalRecvFeesResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTotalAckFeesDesc = {
    methodName: "TotalAckFees",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTotalAckFeesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTotalAckFeesResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTotalTimeoutFeesDesc = {
    methodName: "TotalTimeoutFees",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTotalTimeoutFeesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTotalTimeoutFeesResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryCounterpartyAddressDesc = {
    methodName: "CounterpartyAddress",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryCounterpartyAddressRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryCounterpartyAddressResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryFeeEnabledChannelsDesc = {
    methodName: "FeeEnabledChannels",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryFeeEnabledChannelsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryFeeEnabledChannelsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryFeeEnabledChannelDesc = {
    methodName: "FeeEnabledChannel",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryFeeEnabledChannelRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryFeeEnabledChannelResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map
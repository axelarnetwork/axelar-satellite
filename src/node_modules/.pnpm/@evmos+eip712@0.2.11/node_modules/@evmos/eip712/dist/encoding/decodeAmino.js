"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeAminoSignDoc = exports.eip712MessageType = exports.getFeePayerFromMsg = exports.MSG_TYPES = void 0;
const utils_1 = require("./utils");
const msgVote_1 = require("../messages/gov/msgVote");
const msgsend_1 = require("../messages/msgsend");
const base_1 = require("../messages/base");
const staking_1 = require("../messages/staking");
exports.MSG_TYPES = {
    MSG_SEND: 'cosmos-sdk/MsgSend',
    MSG_VOTE: 'cosmos-sdk/MsgVote',
    MSG_DELEGATE: 'cosmos-sdk/MsgDelegate',
};
function getFeePayerFromMsg(msg) {
    switch (msg.type) {
        case exports.MSG_TYPES.MSG_SEND:
            return msg.value.from_address;
        case exports.MSG_TYPES.MSG_VOTE:
            return msg.value.voter;
        case exports.MSG_TYPES.MSG_DELEGATE:
            return msg.value.delegator_address;
        default:
            throw new Error('Unsupported message type');
    }
}
exports.getFeePayerFromMsg = getFeePayerFromMsg;
function formatSignDoc(signDoc) {
    const signDocCpy = {};
    Object.assign(signDocCpy, signDoc);
    if (!Object.keys(signDoc.fee).includes('feePayer') ||
        signDoc.fee.feePayer === '') {
        signDocCpy.fee.feePayer = getFeePayerFromMsg(signDoc.msgs[0]);
    }
    return signDocCpy;
}
function eip712MessageType(msg) {
    switch (msg.type) {
        case exports.MSG_TYPES.MSG_SEND:
            return (0, base_1.generateTypes)(msgsend_1.MSG_SEND_TYPES);
        case exports.MSG_TYPES.MSG_VOTE:
            return (0, base_1.generateTypes)(msgVote_1.MSG_VOTE_TYPES);
        case exports.MSG_TYPES.MSG_DELEGATE:
            return (0, base_1.generateTypes)(staking_1.MSG_DELEGATE_TYPES);
        default:
            throw new Error('Unsupported message type in SignDoc');
    }
}
exports.eip712MessageType = eip712MessageType;
function decodeAminoSignDoc(bytes) {
    const rawSignDoc = JSON.parse(Buffer.from(bytes).toString());
    if (rawSignDoc.msgs.length !== 1) {
        throw new Error(`Expected single message in Amino SignDoc but received ${rawSignDoc.msgs.length}.`);
    }
    const signDoc = formatSignDoc(rawSignDoc);
    const chainId = signDoc.chain_id;
    const msg = signDoc.msgs[0];
    const type = eip712MessageType(msg);
    return (0, base_1.createEIP712)(type, (0, utils_1.parseChainId)(chainId), signDoc);
}
exports.decodeAminoSignDoc = decodeAminoSignDoc;
//# sourceMappingURL=decodeAmino.js.map
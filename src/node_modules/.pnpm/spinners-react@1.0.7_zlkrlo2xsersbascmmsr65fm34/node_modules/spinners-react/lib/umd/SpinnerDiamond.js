(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.SpinnersReact = {}, global.React));
})(this, (function (exports, React) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    var defaultProps$1 = {
        speed: 100,
        still: false,
        thickness: 100,
    };
    var secondaryColorDefaultProps = __assign(__assign({}, defaultProps$1), { secondaryColor: 'rgba(0,0,0,0.44)' });

    var defaultProps = {
        color: '#38ad48',
        enabled: true,
        size: 50,
        style: {},
    };
    var normalizeSize = function (size) { return (parseFloat(size.toString()).toString() === size.toString()
        ? size + "px"
        : size.toString()); };
    var withSharedProps = function (Component) {
        var Wrapper = function (props) {
            var color = props.color, enabled = props.enabled, size = props.size, style = props.style, otherProps = __rest(props, ["color", "enabled", "size", "style"]);
            var componentProps = __assign(__assign({}, otherProps), { style: __assign({ color: color, overflow: 'visible', width: normalizeSize(size) }, style) });
            if (!enabled)
                return null;
            return React__default["default"].createElement(Component, __assign({}, componentProps));
        };
        Wrapper.defaultProps = defaultProps;
        return Wrapper;
    };

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "@keyframes spinners-react-diamond{25%{transform:translate(30px,-30px)}50%{transform:translate(60px)}75%{transform:translate(30px,30px)}}";
    styleInject(css_248z);

    var coords = [
        { x: 3, y: 48 },
        { x: 18, y: 33 },
        { x: 18, y: 48 },
        { x: 18, y: 63 },
        { x: 33, y: 48 },
        // -------------
        { x: 33, y: 18 },
        { x: 33, y: 33 },
        { x: 33, y: 63 },
        { x: 33, y: 78 },
        { x: 48, y: 3 },
        { x: 48, y: 18 },
        { x: 48, y: 33 },
        { x: 48, y: 48 },
        { x: 48, y: 63 },
        { x: 48, y: 78 },
        { x: 48, y: 93 },
        { x: 63, y: 18 },
        { x: 63, y: 33 },
        { x: 63, y: 48 },
        { x: 63, y: 63 },
        { x: 63, y: 78 },
        { x: 78, y: 33 },
        { x: 78, y: 48 },
        { x: 78, y: 63 },
        { x: 93, y: 48 },
    ];
    var Component = function (_a) {
        var secondaryColor = _a.secondaryColor, speed = _a.speed, still = _a.still, thickness = _a.thickness, svgProps = __rest(_a, ["secondaryColor", "speed", "still", "thickness"]);
        var diamondStyle = {
            animation: "spinners-react-diamond " + 140 / speed + "s steps(2, end) infinite",
        };
        if (still)
            diamondStyle.animation = 'none';
        return (React__default["default"].createElement("svg", __assign({ fill: "currentColor" }, svgProps, { viewBox: "0 0 96 96" }),
            coords.map(function (c) { return (React__default["default"].createElement("circle", { key: c.x + "-" + c.y, cx: c.x, cy: c.y, fill: secondaryColor, r: 2.5 * (thickness / 100) })); }),
            React__default["default"].createElement("g", { style: diamondStyle }, coords.filter(function (c, i) { return i < 5; }).map(function (c) { return (React__default["default"].createElement("circle", { key: "h-" + c.x + "-" + c.y, cx: c.x, cy: c.y, r: 3.5 * (thickness / 100) })); }))));
    };
    Component.defaultProps = secondaryColorDefaultProps;
    var SpinnerRomb = withSharedProps(Component);
    var SpinnerDiamond = withSharedProps(Component);

    exports.SpinnerDiamond = SpinnerDiamond;
    exports.SpinnerRomb = SpinnerRomb;

}));
//# sourceMappingURL=SpinnerDiamond.js.map

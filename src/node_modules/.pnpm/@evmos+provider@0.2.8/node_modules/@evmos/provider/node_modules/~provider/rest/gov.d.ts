import { Coin } from './coin';
export declare enum ProposalStatus {
    Unspecified = "PROPOSAL_STATUS_UNSPECIFIED",
    Deposit = "PROPOSAL_STATUS_DEPOSIT_PERIOD",
    Voting = "PROPOSAL_STATUS_VOTING_PERIOD",
    Passed = "PROPOSAL_STATUS_PASSED",
    Rejected = "PROPOSAL_STATUS_REJECTED",
    Failed = "PROPOSAL_STATUS_FAILED"
}
export declare function generateEndpointProposals(): string;
export interface BaseProposalContent<T = string> {
    '@type': T;
    title: string;
    description: string;
}
export interface SoftwareUpgradeProposalPlan {
    name: string;
    time: string;
    upgraded_client_state: string;
    info: string;
    height: string;
}
export interface SoftwareUpgradeProposalContent extends BaseProposalContent<'/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal'> {
    plan: SoftwareUpgradeProposalPlan;
}
export interface ParameterChangeProposalParam {
    subspace: string;
    key: string;
    value: string;
}
export interface ParameterChangeProposalContent extends BaseProposalContent<'/cosmos.params.v1beta1.ParameterChangeProposal'> {
    changes: ParameterChangeProposalParam[];
}
export declare type ProposalContent = BaseProposalContent | SoftwareUpgradeProposalContent | ParameterChangeProposalContent;
export interface Proposal {
    proposal_id: string;
    content: ProposalContent;
    status: string;
    final_tally_result: {
        yes: string;
        abstain: string;
        no: string;
        no_with_veto: string;
    };
    submit_time: string;
    deposit_end_time: string;
    total_deposit: Coin[];
    voting_start_time: string;
    voting_end_time: string;
}
export interface ProposalsResponse {
    proposals: Proposal[];
    pagination: {
        next_key: string;
        total: number;
    };
}
export declare function generateEndpointProposalTally(proposalId: string): string;
export interface TallyResponse {
    tally: {
        yes: string;
        abstain: string;
        no: string;
        no_with_veto: string;
    };
}
//# sourceMappingURL=gov.d.ts.map
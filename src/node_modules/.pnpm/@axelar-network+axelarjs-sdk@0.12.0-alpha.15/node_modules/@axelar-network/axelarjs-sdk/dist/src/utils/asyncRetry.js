"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncRetry = void 0;
const sleep_1 = require("./sleep");
function asyncRetry(retryFunc, retryConditionMet, errorHandler, secondsToRetry = 5, maxRetries = 3, count = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        const retry = () => __awaiter(this, void 0, void 0, function* () {
            yield (0, sleep_1.sleep)(secondsToRetry);
            return asyncRetry(retryFunc, retryConditionMet, errorHandler, secondsToRetry, maxRetries, count + 1);
        });
        try {
            if (count >= maxRetries)
                return null;
            const response = yield retryFunc();
            if (!retryConditionMet(response))
                return retry();
            return response;
        }
        catch (e) {
            errorHandler && errorHandler(e, count);
            return retry();
        }
    });
}
exports.asyncRetry = asyncRetry;
//# sourceMappingURL=asyncRetry.js.map
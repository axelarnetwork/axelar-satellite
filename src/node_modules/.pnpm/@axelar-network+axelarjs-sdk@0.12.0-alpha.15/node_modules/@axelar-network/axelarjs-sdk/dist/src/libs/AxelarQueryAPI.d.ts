import { RestService } from "../services";
import { AxelarQueryAPIConfig, BaseFeeResponse, Environment, EvmChain, GasToken } from "./types";
import { FeeInfoResponse, TransferFeeResponse } from "@axelar-network/axelarjs-types/axelar/nexus/v1beta1/query";
interface TranslatedTransferRateLimitResponse {
    incoming: string;
    outgoing: string;
    limit: string;
}
export declare class AxelarQueryAPI {
    readonly environment: Environment;
    readonly lcdApi: RestService;
    readonly rpcApi: RestService;
    readonly axelarGMPServiceApi: RestService;
    readonly axelarRpcUrl: string;
    readonly axelarLcdUrl: string;
    readonly axelarGMPServiceUrl: string;
    private allAssets;
    private axelarQueryClient;
    constructor(config: AxelarQueryAPIConfig);
    private _initializeAssets;
    /**
     * Gets the fee for a chain and asset
     * example testnet query: https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/fee?chain=ethereum&asset=uusd
     * @param chainId
     * @param assetDenom
     * @returns
     */
    getFeeForChainAndAsset(chainId: string, assetDenom: string): Promise<FeeInfoResponse>;
    /**
     * Gest the transfer fee for a given transaction
     * example testnet query: "https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/transfer_fee?source_chain=ethereum&destination_chain=terra&amount=100000000uusd"
     * @param sourceChainId
     * @param destinationChainId
     * @param assetDenom
     * @param amountInDenom
     * @returns
     */
    getTransferFee(sourceChainId: string, destinationChainId: string, assetDenom: string, amountInDenom: number): Promise<TransferFeeResponse>;
    /**
     * Gets the gas price for a destination chain to be paid to the gas receiver on a source chain
     * example testnet query: https://testnet.api.gmp.axelarscan.io/?method=getGasPrice&destinationChain=ethereum&sourceChain=avalanche&sourceTokenAddress=0x43F4600b552089655645f8c16D86A5a9Fa296bc3&sourceTokenSymbol=UST
     * @param sourceChainId
     * @param destinationChainId
     * @param sourceChainTokenSymbol
     * @returns
     */
    getGasInfo(sourceChainId: EvmChain | string, destinationChainId: EvmChain | string, sourceChainTokenSymbol: GasToken | string): Promise<any>;
    /**
     * Gets the base fee in native token wei for a given source and destination chain combination
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceTokenSymbol (optional)
     * @returns base fee in native token in wei, translated into the native gas token of choice
     */
    getNativeGasBaseFee(sourceChainId: EvmChain | string, destinationChainId: EvmChain | string, sourceTokenSymbol?: GasToken): Promise<BaseFeeResponse>;
    /**
     * Calculate estimated gas amount to pay for the gas receiver contract.
     * @param sourceChainId
     * @param destinationChainId
     * @param sourceChainTokenSymbol
     * @param gasLimit (Optional) An estimated gas amount required to execute `executeWithToken` function. The default value is 700000 which should be sufficient for most transactions.
     * @param gasMultiplier (Optional) A multiplier used to create a buffer above the calculated gas fee, to account for potential slippage throughout tx execution, e.g. 1.1 = 10% buffer. supports up to 3 decimal places
     * @returns
     */
    estimateGasFee(sourceChainId: EvmChain | string, destinationChainId: EvmChain | string, sourceChainTokenSymbol: GasToken | string, gasLimit?: number, gasMultiplier?: number): Promise<string>;
    /**
     * Get the denom for an asset given its symbol on a chain
     * @param symbol
     * @param chainName
     * @returns
     */
    getDenomFromSymbol(symbol: string, chainName: string): Promise<string | null>;
    /**
     * Get the symbol for an asset on a given chain given its denom
     * @param denom
     * @param chainName
     * @returns
     */
    getSymbolFromDenom(denom: string, chainName: string): Promise<string | null | undefined>;
    /**
     * Get the asset config for an asset on a given chain given its denom
     * @param denom
     * @param chainName
     * @returns asset config
     */
    getAssetConfigFromDenom(denom: string, chainName: string): Promise<import("../assets/types").AssetInfoForChain | null>;
    /**
     * Get the contract address from the chainId and the contractKey
     * @param chainId - the chainId of the chain
     * @param contractKey - the key of the contract in the config file.
     * A valid contractKey can be found here https://github.com/axelarnetwork/chains/blob/790f08350e792e27412ded6721c13ce78267fd72/testnet-config.json#L1951-L1954 e.g. ("gas_service", "deposit_service", "default_refund_collector")
     * @returns the contract address
     */
    getContractAddressFromConfig(chainId: string, contractKey: string): Promise<string>;
    /**
     * Get a list of active chains.
     * @returns an array of active chains
     */
    getActiveChains(): Promise<string[]>;
    /**
     * Check if a chain is active.
     * @param chainId the chain id to check
     * @returns true if the chain is active, false otherwise
     */
    isChainActive(chainId: EvmChain | string): Promise<boolean>;
    /**
     * Throw an error if any chain in the list is inactive.
     * @param chainIds A list of chainIds to check
     */
    throwIfInactiveChains(chainIds: EvmChain[] | string[]): Promise<void>;
    /**
     * Initialize the query client if it hasn't been initialized yet
     */
    private initQueryClientIfNeeded;
    /**
     * Check if a chain is active.
     * @param fromChainId source chain id
     * @param toChainId destination chain id
     * @param denom denom of asset (e.g. for USDC, uusdc)
     * @param proportionOfTotalLimitPerTransfer (optional) proportion of total limit you would like to limit users, e.g. for 25% of total, use 4
     * @returns true if the chain is active, false otherwise
     */
    getTransferLimit({ fromChainId, toChainId, denom, proportionOfTotalLimitPerTransfer, }: {
        fromChainId: string;
        toChainId: string;
        denom: string;
        proportionOfTotalLimitPerTransfer?: number;
    }): Promise<string>;
    getTransferLimitNexusQuery({ chainId, denom, }: {
        denom: string;
        chainId: string;
    }): Promise<TranslatedTransferRateLimitResponse>;
    private _convertAssetDenom;
}
export {};
//# sourceMappingURL=AxelarQueryAPI.d.ts.map
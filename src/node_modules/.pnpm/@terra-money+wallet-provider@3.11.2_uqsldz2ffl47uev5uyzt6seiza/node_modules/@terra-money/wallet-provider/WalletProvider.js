import { WalletContext, WalletStatus, } from '@terra-money/use-wallet';
import { WalletController, } from '@terra-money/wallet-controller';
import React, { useEffect, useMemo, useState } from 'react';
const EMPTY_ARRAY = [];
const EMPTY_SUPPORT_FEATURES = new Set();
export function WalletProvider({ children, defaultNetwork, walletConnectChainIds, connectorOpts, pushServerOpts, createReadonlyWalletSession, selectExtension, waitingChromeExtensionInstallCheck, dangerously__chromeExtensionCompatibleBrowserCheck, plugins, }) {
    const [controller] = useState(() => new WalletController({
        defaultNetwork,
        walletConnectChainIds,
        connectorOpts,
        pushServerOpts,
        createReadonlyWalletSession,
        selectExtension,
        waitingChromeExtensionInstallCheck,
        dangerously__chromeExtensionCompatibleBrowserCheck,
        plugins,
    }));
    const [availableConnectTypes, setAvailableConnectTypes] = useState(() => []);
    const [availableInstallTypes, setAvailableInstallTypes] = useState(() => []);
    const [availableConnections, setAvailableConnections] = useState(() => []);
    const [availableInstallations, setAvailableInstallations] = useState(() => []);
    const [states, setStates] = useState(() => ({
        status: WalletStatus.INITIALIZING,
        network: defaultNetwork,
    }));
    useEffect(() => {
        const availableConnectTypesSubscription = controller
            .availableConnectTypes()
            .subscribe({
            next: (value) => {
                setAvailableConnectTypes(value);
            },
        });
        const availableInstallTypesSubscription = controller
            .availableInstallTypes()
            .subscribe({
            next: (value) => {
                setAvailableInstallTypes(value);
            },
        });
        const availableConnectionsSubscription = controller
            .availableConnections()
            .subscribe({
            next: (value) => {
                setAvailableConnections(value);
            },
        });
        const availableInstallationsSubscription = controller
            .availableInstallations()
            .subscribe({
            next: (value) => {
                setAvailableInstallations(value);
            },
        });
        const statesSubscription = controller.states().subscribe({
            next: (value) => {
                setStates(value);
            },
        });
        return () => {
            availableConnectTypesSubscription.unsubscribe();
            availableInstallTypesSubscription.unsubscribe();
            availableConnectionsSubscription.unsubscribe();
            availableInstallationsSubscription.unsubscribe();
            statesSubscription.unsubscribe();
        };
    }, [controller]);
    const state = useMemo(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            availableConnections,
            availableInstallations,
            status: states.status,
            network: states.network,
            wallets: states.status === WalletStatus.WALLET_CONNECTED
                ? states.wallets
                : EMPTY_ARRAY,
            install: controller.install,
            connect: controller.connect,
            connectReadonly: controller.connectReadonly,
            disconnect: controller.disconnect,
            connection: states.status === WalletStatus.WALLET_CONNECTED
                ? states.connection
                : undefined,
            supportFeatures: states.status === WalletStatus.WALLET_CONNECTED
                ? states.supportFeatures
                : EMPTY_SUPPORT_FEATURES,
            post: controller.post,
            sign: controller.sign,
            signBytes: controller.signBytes,
            hasCW20Tokens: controller.hasCW20Tokens,
            addCW20Tokens: controller.addCW20Tokens,
            hasNetwork: controller.hasNetwork,
            addNetwork: controller.addNetwork,
            refetchStates: controller.refetchStates,
            recheckStatus: controller.refetchStates,
            isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser,
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        availableConnections,
        availableInstallations,
        controller,
        states,
    ]);
    return (React.createElement(WalletContext.Provider, { value: state }, children));
}
//# sourceMappingURL=data:application/json;base64,
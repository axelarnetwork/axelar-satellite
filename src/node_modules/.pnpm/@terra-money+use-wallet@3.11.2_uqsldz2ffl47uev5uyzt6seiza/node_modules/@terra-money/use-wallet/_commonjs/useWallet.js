"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWallet = exports.WalletContext = void 0;
const react_1 = require("react");
// @ts-ignore
exports.WalletContext = (0, react_1.createContext)();
function useWallet() {
    return (0, react_1.useContext)(exports.WalletContext);
}
exports.useWallet = useWallet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlV2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS91c2Utd2FsbGV0L3VzZVdhbGxldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFZQSxpQ0FBMkQ7QUFzWTNELGFBQWE7QUFDQSxRQUFBLGFBQWEsR0FBb0IsSUFBQSxxQkFBYSxHQUFVLENBQUM7QUFFdEUsU0FBZ0IsU0FBUztJQUN2QixPQUFPLElBQUEsa0JBQVUsRUFBQyxxQkFBYSxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUZELDhCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29ubmVjdGlvbixcbiAgQ29ubmVjdFR5cGUsXG4gIEluc3RhbGxhdGlvbixcbiAgTmV0d29ya0luZm8sXG4gIFNpZ25CeXRlc1Jlc3VsdCxcbiAgU2lnblJlc3VsdCxcbiAgVHhSZXN1bHQsXG4gIFdhbGxldEluZm8sXG4gIFdhbGxldFN0YXR1cyxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L3dhbGxldC10eXBlcyc7XG5pbXBvcnQgeyBFeHRlbnNpb25PcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7IENvbnRleHQsIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FsbGV0IHtcbiAgLyoqXG4gICAqIGN1cnJlbnQgY2xpZW50IHN0YXR1c1xuICAgKlxuICAgKiB0aGlzIHdpbGwgYmUgb25lIG9mIFdhbGxldFN0YXR1cy5JTklUSUFMSVpJTkcgfCBXYWxsZXRTdGF0dXMuV0FMTEVUX05PVF9DT05ORUNURUQgfCBXYWxsZXRTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRFxuICAgKlxuICAgKiBJTklUSUFMSVpJTkcgPSBjaGVja2luZyB0aGF0IHRoZSBzZXNzaW9uIGFuZCB0aGUgY2hyb21lIGV4dGVuc2lvbiBpbnN0YWxsYXRpb24uIChzaG93IHRoZSBsb2FkaW5nIHRvIHVzZXJzKVxuICAgKiBXQUxMRVRfTk9UX0NPTk5FQ1RFRCA9IHRoZXJlIGlzIG5vIGNvbm5lY3RlZCB3YWxsZXQgKHNob3cgdGhlIGNvbm5lY3QgYW5kIGluc3RhbGwgb3B0aW9ucyB0byB1c2VycylcbiAgICogV0FMTEVUX0NPTk5FQ1RFRCA9IHRoZXJlIGlzIGFjb25uZWN0ZWQgd2FsbGV0IChzaG93IHRoZSB3YWxsZXQgaW5mbyBhbmQgZGlzY29ubmVjdCBidXR0b24gdG8gdXNlcnMpXG4gICAqXG4gICAqIEBzZWUgV2FsbGV0I3JlZmV0Y2hTdGF0ZXNcbiAgICogQHNlZSBXYWxsZXRDb250cm9sbGVyI3N0YXR1c1xuICAgKi9cbiAgc3RhdHVzOiBXYWxsZXRTdGF0dXM7XG5cbiAgLyoqXG4gICAqIGN1cnJlbnQgc2VsZWN0ZWQgbmV0d29ya1xuICAgKlxuICAgKiAtIGlmIHN0YXR1cyBpcyBJTklUSUFMSVpJTkcgb3IgV0FMTEVUX05PVF9DT05ORUNURUQgPSB0aGlzIHdpbGwgYmUgdGhlIGRlZmF1bHROZXR3b3JrXG4gICAqIC0gaWYgc3RhdHVzIGlzIFdBTExFVF9DT05ORUNURUQgPSB0aGlzIGRlcGVuZHMgb24gdGhlIGNvbm5lY3RlZCBlbnZpcm9ubWVudFxuICAgKlxuICAgKiBAc2VlIFdhbGxldFByb3ZpZGVyUHJvcHMjZGVmYXVsdE5ldHdvcmtcbiAgICogQHNlZSBXYWxsZXRDb250cm9sbGVyI25ldHdvcmtcbiAgICovXG4gIG5ldHdvcms6IE5ldHdvcmtJbmZvO1xuXG4gIC8qKlxuICAgKiBhdmFpbGFibGUgY29ubmVjdCB0eXBlcyBvbiB0aGUgYnJvd3NlclxuICAgKlxuICAgKiBAc2VlIFdhbGxldCNjb25uZWN0XG4gICAqIEBzZWUgV2FsbGV0Q29udHJvbGxlciNhdmFpbGFibGVDb25uZWN0VHlwZXNcbiAgICovXG4gIGF2YWlsYWJsZUNvbm5lY3RUeXBlczogQ29ubmVjdFR5cGVbXTtcblxuICAvKipcbiAgICogYXZhaWxhYmxlIGNvbm5lY3Rpb25zIGluY2x1ZGVzIGlkZW50aWZpZXIsIG5hbWUsIGljb25cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIGNvbnN0IHsgYXZhaWxhYmxlQ29ubmVjdGlvbnMsIGNvbm5lY3QgfSA9IHVzZVdhbGxldCgpXG4gICAqXG4gICAqIHJldHVybiAoXG4gICAqICA8ZGl2PlxuICAgKiAgICB7XG4gICAqICAgICAgYXZhaWxhYmxlQ29ubmVjdGlvbnMubWFwKCh7dHlwZSwgaWRlbnRpZmllciwgbmFtZSwgaWNvbn0pID0+IChcbiAgICogICAgICAgIDxidXRvdG4ga2V5PXtgJHt0eXBlfToke2lkZW50aWZpZXJ9YH0gb25DbGljaz17KCkgPT4gY29ubmVjdCh0eXBlLCBpZGVudGlmaWVyKX0+XG4gICAqICAgICAgICAgIDxpbWcgc3JjPXtpY29ufSAvPiB7bmFtZX1cbiAgICogICAgICAgIDwvYnV0dG9uPlxuICAgKiAgICAgICkpXG4gICAqICAgIH1cbiAgICogIDwvZGl2PlxuICAgKiApXG4gICAqIGBgYFxuICAgKi9cbiAgYXZhaWxhYmxlQ29ubmVjdGlvbnM6IENvbm5lY3Rpb25bXTtcblxuICAvKipcbiAgICogY3VycmVudCBjb25uZWN0ZWQgY29ubmVjdGlvblxuICAgKi9cbiAgY29ubmVjdGlvbjogQ29ubmVjdGlvbiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogY29ubmVjdCB0byB3YWxsZXRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIGNvbnN0IHsgc3RhdHVzLCBhdmFpbGFibGVDb25uZWN0VHlwZXMsIGNvbm5lY3QgfSA9IHVzZVdhbGxldCgpXG4gICAqXG4gICAqIHJldHVybiBzdGF0dXMgPT09IFdhbGxldFN0YXR1cy5XQUxMRVRfTk9UX0NPTk5FQ1RFRCAmJlxuICAgKiAgICAgICAgYXZhaWxhYmxlQ29ubmVjdFR5cGVzLmluY2x1ZHMoQ29ubmVjdFR5cGUuRVhURU5TSU9OKSAmJlxuICAgKiAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBjb25uZWN0KENvbm5lY3RUeXBlLkVYVEVOU0lPTil9PlxuICAgKiAgICBDb25uY3QgQ2hyb21lIEV4dGVuc2lvblxuICAgKiAgPC9idXR0b24+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAc2VlIFdhbGxldCNhdmFpbGFibGVDb25uZWN0VHlwZXNcbiAgICogQHNlZSBXYWxsZXRDb250cm9sbGVyI2Nvbm5lY3RcbiAgICovXG4gIGNvbm5lY3Q6ICh0eXBlPzogQ29ubmVjdFR5cGUsIGlkZW50aWZpZXI/OiBzdHJpbmcpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIG1hbnVhbCBjb25uZWN0IHRvIHJlYWQgb25seSBzZXNzaW9uXG4gICAqXG4gICAqIEBzZWUgV2FsbGV0I2Nvbm5lY3RSZWFkb25seVxuICAgKi9cbiAgY29ubmVjdFJlYWRvbmx5OiAodGVycmFBZGRyZXNzOiBzdHJpbmcsIG5ldHdvcms6IE5ldHdvcmtJbmZvKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBhdmFpbGFibGUgaW5zdGFsbCB0eXBlcyBvbiB0aGUgYnJvd3NlclxuICAgKlxuICAgKiBpbiB0aGlzIHRpbWUsIHRoaXMgb25seSBjb250YWlucyBbQ29ubmVjdFR5cGUuRVhURU5TSU9OXVxuICAgKlxuICAgKiBAc2VlIFdhbGxldCNpbnN0YWxsXG4gICAqIEBzZWUgV2FsbGV0Q29udHJvbGxlciNhdmFpbGFibGVJbnN0YWxsVHlwZXNcbiAgICovXG4gIGF2YWlsYWJsZUluc3RhbGxUeXBlczogQ29ubmVjdFR5cGVbXTtcblxuICAvKipcbiAgICogYXZhaWxhYmxlIGluc3RhbGxhdGlvbnMgaW5jbHVkZXMgaWRlbnRpZmllciwgbmFtZSwgaWNvbiwgdXJsXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBjb25zdCB7IGF2YWlsYWJsZUluc3RhbGxhdGlvbnMgfSA9IHVzZVdhbGxldCgpXG4gICAqXG4gICAqIHJldHVybiAoXG4gICAqICA8ZGl2PlxuICAgKiAgICB7XG4gICAqICAgICAgYXZhaWxhYmxlSW5zdGFsbGF0aW9ucy5tYXAoKHt0eXBlLCBpZGVudGlmaWVyLCBuYW1lLCBpY29uLCB1cmx9KSA9PiAoXG4gICAqICAgICAgICA8YSBrZXk9e2Ake3R5cGV9OiR7aWRlbnRpZmllcn1gfSBocmVmPXt1cmx9PlxuICAgKiAgICAgICAgICA8aW1nIHNyYz17aWNvbn0gLz4ge25hbWV9XG4gICAqICAgICAgICA8L2E+XG4gICAqICAgICAgKSlcbiAgICogICAgfVxuICAgKiAgPC9kaXY+XG4gICAqIClcbiAgICogYGBgXG4gICAqXG4gICAqIEBzZWUgV2FsbGV0I2luc3RhbGxcbiAgICogQHNlZSBXYWxsZXRDb250cm9sbGVyI2F2YWlsYWJsZUluc3RhbGxhdGlvbnNcbiAgICovXG4gIGF2YWlsYWJsZUluc3RhbGxhdGlvbnM6IEluc3RhbGxhdGlvbltdO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGF2YWlsYWJsZUluc3RhbGxhdGlvbnNcbiAgICpcbiAgICogaW5zdGFsbCBmb3IgdGhlIGNvbm5lY3QgdHlwZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICogY29uc3QgeyBzdGF0dXMsIGF2YWlsYWJsZUluc3RhbGxUeXBlcyB9ID0gdXNlV2FsbGV0KClcbiAgICpcbiAgICogcmV0dXJuIHN0YXR1cyA9PT0gV2FsbGV0U3RhdHVzLldBTExFVF9OT1RfQ09OTkVDVEVEICYmXG4gICAqICAgICAgICBhdmFpbGFibGVJbnN0YWxsVHlwZXMuaW5jbHVkZXMoQ29ubmVjdFR5cGUuRVhURU5TSU9OKSAmJlxuICAgKiAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBpbnN0YWxsKENvbm5lY3RUeXBlLkVYVEVOU0lPTil9PlxuICAgKiAgICBJbnN0YWxsIEV4dGVuc2lvblxuICAgKiAgPC9idXR0b24+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAc2VlIFdhbGxldCNhdmFpbGFibGVJbnN0YWxsVHlwZXNcbiAgICogQHNlZSBXYWxsZXRDb250cm9sbGVyI2luc3RhbGxcbiAgICovXG4gIGluc3RhbGw6ICh0eXBlOiBDb25uZWN0VHlwZSkgPT4gdm9pZDtcblxuICAvKipcbiAgICogY29ubmVjdGVkIHdhbGxldHNcbiAgICpcbiAgICogdGhpcyB3aWxsIGJlIGxpa2VcbiAgICogYFt7IGNvbm5lY3RUeXBlOiBDb25uZWN0VHlwZS5XQUxMRVRDT05ORUNULCB0ZXJyYUFkZHJlc3M6ICdYWFhYWFhYWFgnIH1dYFxuICAgKlxuICAgKiBpbiB0aGlzIHRpbWUsIHlvdSBjYW4gZ2V0IG9ubHkgb25lIHdhbGxldC4gYHdhbGxldHNbMF1gXG4gICAqXG4gICAqIEBzZWUgV2FsbGV0Q29udHJvbGxlciN3YWxsZXRzXG4gICAqL1xuICB3YWxsZXRzOiBXYWxsZXRJbmZvW107XG5cbiAgLyoqXG4gICAqIGRpc2Nvbm5lY3RcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIGNvbnN0IHsgc3RhdHVzLCBkaXNjb25uZWN0IH0gPSB1c2VXYWxsZXQoKVxuICAgKlxuICAgKiByZXR1cm4gc3RhdHVzID09PSBXYWxsZXRTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRCAmJlxuICAgKiAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNjb25uZWN0KCl9PlxuICAgKiAgICBEaXNjb25uZWN0XG4gICAqICA8L2J1dHRvbj5cbiAgICogYGBgXG4gICAqL1xuICBkaXNjb25uZWN0OiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiByZWxvYWQgdGhlIGNvbm5lY3RlZCB3YWxsZXQgc3RhdGVzXG4gICAqXG4gICAqIGluIHRoaXMgdGltZSwgdGhpcyBvbmx5IHdvcmsgb24gdGhlIENvbm5lY3RUeXBlLkVYVEVOU0lPTlxuICAgKlxuICAgKiBAc2VlIFdhbGxldENvbnRyb2xsZXIjcmVmZXRjaFN0YXRlc1xuICAgKi9cbiAgcmVmZXRjaFN0YXRlczogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSByZWZldGNoU3RhdGVzKCkuIHRoaXMgZnVuY3Rpb24gd2lsbCByZW1vdmUgb24gbmV4dCBtYWpvciB1cGRhdGVcbiAgICovXG4gIHJlY2hlY2tTdGF0dXM6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIHN1cHBvcnQgZmVhdHVyZXMgb2YgdGhpcyBjb25uZWN0aW9uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBjb25zdCB7IHN1cHBvcnRGZWF0dXJlcyB9ID0gdXNlV2FsbGV0KClcbiAgICpcbiAgICogcmV0dXJuIChcbiAgICogIDxkaXY+XG4gICAqICAgIHtcbiAgICogICAgICBzdXBwb3J0RmVhdHVyZXMuaGFzKCdwb3N0JykgJiZcbiAgICogICAgICA8YnV0dG9uIG9uQ2xpY2s9e3Bvc3R9PnBvc3Q8L2J1dHRvbj5cbiAgICogICAgfVxuICAgKiAgICB7XG4gICAqICAgICAgc3VwcG9ydEZlYXR1cmVzLmhhcygnY3cyMC10b2tlbicpICYmXG4gICAqICAgICAgPGJ1dHRvbiBvbkNsaWNrPXthZGRDVzIwVG9rZW59PmFkZCBjdzIwIHRva2VuPC9idXR0b24+XG4gICAqICAgIH1cbiAgICogIDwvZGl2PlxuICAgKiApXG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGlzIHR5cGUgaXMgc2FtZSBhcyBgaW1wb3J0IHR5cGUgeyBUZXJyYVdlYkV4dGVuc2lvbkZlYXR1cmVzIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3dlYi1leHRlbnNpb24taW50ZXJmYWNlJ2BcbiAgICovXG4gIHN1cHBvcnRGZWF0dXJlczogU2V0PFxuICAgICdwb3N0JyB8ICdzaWduJyB8ICdzaWduLWJ5dGVzJyB8ICdjdzIwLXRva2VuJyB8ICduZXR3b3JrJ1xuICA+O1xuXG4gIC8qKlxuICAgKiBwb3N0IHRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBjb25zdCB7IHBvc3QgfSA9IHVzZVdhbGxldCgpXG4gICAqXG4gICAqIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgKiAgIHRyeSB7XG4gICAqICAgIGNvbnN0IHJlc3VsdDogVHhSZXN1bHQgPSBhd2FpdCBwb3N0KHsuLi5FeHRlbnNpb25PcHRpb25zfSlcbiAgICogICAgLy8gRE8gU09NRVRISU5HLi4uXG4gICAqICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICogICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFVzZXJEZW5pZWQpIHtcbiAgICogICAgICAgLy8gRE8gU09NRVRISU5HLi4uXG4gICAqICAgICB9IGVsc2Uge1xuICAgKiAgICAgICAvLyBETyBTT01FVEhJTkcuLi5cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIH0sIFtdKVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsgRXh0ZW5zaW9uT3B0aW9ucyB9IHR4IHRyYW5zYWN0aW9uIGRhdGFcbiAgICogQHBhcmFtIHRlcnJhQWRkcmVzcyAtIGRvZXMgbm90IHdvcmsgYXQgdGhpcyB0aW1lLiBmb3IgdGhlIGZ1dHVyZSBleHRlbnNpb25cbiAgICpcbiAgICogQHJldHVybiB7IFByb21pc2U8VHhSZXN1bHQ+IH1cbiAgICpcbiAgICogQHRocm93cyB7IFVzZXJEZW5pZWQgfSB1c2VyIGRlbmllZCB0aGUgdHhcbiAgICogQHRocm93cyB7IENyZWF0ZVR4RmFpbGVkIH0gZGlkIG5vdCBjcmVhdGUgdHhoYXNoIChlcnJvciBkb3NlIG5vdCBicm9hZGNhc3RlZClcbiAgICogQHRocm93cyB7IFR4RmFpbGVkIH0gY3JlYXRlZCB0eGhhc2ggKGVycm9yIGJyb2FkY2F0ZWQpXG4gICAqIEB0aHJvd3MgeyBUaW1lb3V0IH0gdXNlciBkb2VzIG5vdCBhY3QgYW55dGhpbmcgaW4gc3BlY2lmaWMgdGltZVxuICAgKiBAdGhyb3dzIHsgVHhVbnNwZWNpZmllZEVycm9yIH0gdW5rbm93biBlcnJvclxuICAgKlxuICAgKiBAc2VlIFdhbGxldENvbnRyb2xsZXIjcG9zdFxuICAgKi9cbiAgcG9zdDogKHR4OiBFeHRlbnNpb25PcHRpb25zLCB0ZXJyYUFkZHJlc3M/OiBzdHJpbmcpID0+IFByb21pc2U8VHhSZXN1bHQ+O1xuXG4gIC8qKlxuICAgKiBzaWduIHRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBjb25zdCB7IHNpZ24gfSA9IHVzZVdhbGxldCgpXG4gICAqXG4gICAqIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgKiAgIHRyeSB7XG4gICAqICAgIGNvbnN0IHJlc3VsdDogU2lnblJlc3VsdCA9IGF3YWl0IHNpZ24oey4uLkV4dGVuc2lvbk9wdGlvbnN9KVxuICAgKlxuICAgKiAgICAvLyBCcm9hZGNhc3QgU2lnblJlc3VsdFxuICAgKiAgICBjb25zdCB0eCA9IHJlc3VsdC5yZXN1bHRcbiAgICpcbiAgICogICAgY29uc3QgbGNkID0gbmV3IExDRENsaWVudCh7XG4gICAqICAgICAgY2hhaW5JRDogY29ubmVjdGVkV2FsbGV0Lm5ldHdvcmsuY2hhaW5JRCxcbiAgICogICAgICBVUkw6IGNvbm5lY3RlZFdhbGxldC5uZXR3b3JrLmxjZCxcbiAgICogICAgfSlcbiAgICpcbiAgICogICAgY29uc3QgdHhSZXN1bHQgPSBhd2FpdCBsY2QudHguYnJvYWRjYXN0U3luYyh0eClcbiAgICpcbiAgICogICAgLy8gRE8gU09NRVRISU5HLi4uXG4gICAqICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICogICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFVzZXJEZW5pZWQpIHtcbiAgICogICAgICAgLy8gRE8gU09NRVRISU5HLi4uXG4gICAqICAgICB9IGVsc2Uge1xuICAgKiAgICAgICAvLyBETyBTT01FVEhJTkcuLi5cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIH0sIFtdKVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsgRXh0ZW5zaW9uT3B0aW9ucyB9IHR4IHRyYW5zYWN0aW9uIGRhdGFcbiAgICogQHBhcmFtIHRlcnJhQWRkcmVzcyAtIGRvZXMgbm90IHdvcmsgYXQgdGhpcyB0aW1lLiBmb3IgdGhlIGZ1dHVyZSBleHRlbnNpb25cbiAgICpcbiAgICogQHJldHVybiB7IFByb21pc2U8U2lnblJlc3VsdD4gfVxuICAgKlxuICAgKiBAdGhyb3dzIHsgVXNlckRlbmllZCB9IHVzZXIgZGVuaWVkIHRoZSB0eFxuICAgKiBAdGhyb3dzIHsgQ3JlYXRlVHhGYWlsZWQgfSBkaWQgbm90IGNyZWF0ZSB0eGhhc2ggKGVycm9yIGRvc2Ugbm90IGJyb2FkY2FzdGVkKVxuICAgKiBAdGhyb3dzIHsgVHhGYWlsZWQgfSBjcmVhdGVkIHR4aGFzaCAoZXJyb3IgYnJvYWRjYXRlZClcbiAgICogQHRocm93cyB7IFRpbWVvdXQgfSB1c2VyIGRvZXMgbm90IGFjdCBhbnl0aGluZyBpbiBzcGVjaWZpYyB0aW1lXG4gICAqIEB0aHJvd3MgeyBUeFVuc3BlY2lmaWVkRXJyb3IgfSB1bmtub3duIGVycm9yXG4gICAqXG4gICAqIEBzZWUgV2FsbGV0Q29udHJvbGxlciNzaWduXG4gICAqL1xuICBzaWduOiAodHg6IEV4dGVuc2lvbk9wdGlvbnMsIHRlcnJhQWRkcmVzcz86IHN0cmluZykgPT4gUHJvbWlzZTxTaWduUmVzdWx0PjtcblxuICAvKipcbiAgICogc2lnbiBhbnkgYnl0ZXNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIGNvbnN0IHsgc2lnbkJ5dGVzIH0gPSB1c2VXYWxsZXQoKVxuICAgKlxuICAgKiBjb25zdCBCWVRFUyA9IEJ1ZmZlci5mcm9tKCdoZWxsbyB3b3JsZCcpXG4gICAqXG4gICAqIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgKiAgIHRyeSB7XG4gICAqICAgICBjb25zdCB7IHJlc3VsdCB9OiBTaWduQnl0ZXNSZXN1bHQgPSBhd2FpdCBzaWduQnl0ZXMoQllURVMpXG4gICAqXG4gICAqICAgICBjb25zb2xlLmxvZyhyZXN1bHQucmVjaWQpXG4gICAqICAgICBjb25zb2xlLmxvZyhyZXN1bHQuc2lnbmF0dXJlKVxuICAgKiAgICAgY29uc29sZS5sb2cocmVzdWx0LnB1YmxpY19rZXkpXG4gICAqXG4gICAqICAgICBjb25zdCB2ZXJpZmllZDogYm9vbGVhbiA9IHZlcmlmeUJ5dGVzKEJZVEVTLCByZXN1bHQpXG4gICAqICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICogICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFVzZXJEZW5pZWQpIHtcbiAgICogICAgICAgLy8gRE8gU09NRVRISU5HLi4uXG4gICAqICAgICB9IGVsc2Uge1xuICAgKiAgICAgICAvLyBETyBTT01FVEhJTkcuLi5cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIH0sIFtdKVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzXG4gICAqL1xuICBzaWduQnl0ZXM6IChieXRlczogQnVmZmVyLCB0ZXJyYUFkZHJlc3M/OiBzdHJpbmcpID0+IFByb21pc2U8U2lnbkJ5dGVzUmVzdWx0PjtcblxuICAvKipcbiAgICogY2hlY2sgaWYgdG9rZW5zIGFyZSBhZGRlZCBvbiB0aGUgZXh0ZW5zaW9uXG4gICAqXG4gICAqIEBwYXJhbSBjaGFpbklEXG4gICAqIEBwYXJhbSB0b2tlbkFkZHJzIGN3MjAgdG9rZW4gYWRkcmVzc2VzXG4gICAqXG4gICAqIEByZXR1cm4gdG9rZW4gZXhpc3RzXG4gICAqXG4gICAqIEBzZWUgV2FsbGV0Q29udHJvbGxlciNoYXNDVzIwVG9rZW5zXG4gICAqL1xuICBoYXNDVzIwVG9rZW5zOiAoXG4gICAgY2hhaW5JRDogc3RyaW5nLFxuICAgIC4uLnRva2VuQWRkcnM6IHN0cmluZ1tdXG4gICkgPT4gUHJvbWlzZTx7IFt0b2tlbkFkZHI6IHN0cmluZ106IGJvb2xlYW4gfT47XG5cbiAgLyoqXG4gICAqIHJlcXVlc3QgYWRkIHRva2VuIGFkZHJlc3NlcyB0byBicm93c2VyIGV4dGVuc2lvblxuICAgKlxuICAgKiBAcGFyYW0gY2hhaW5JRFxuICAgKiBAcGFyYW0gdG9rZW5BZGRycyBjdzIwIHRva2VuIGFkZHJlc3Nlc1xuICAgKlxuICAgKiBAcmV0dXJuIHRva2VuIGV4aXN0c1xuICAgKlxuICAgKiBAc2VlIFdhbGxldENvbnRyb2xsZXIjYWRkQ1cyMFRva2Vuc1xuICAgKi9cbiAgYWRkQ1cyMFRva2VuczogKFxuICAgIGNoYWluSUQ6IHN0cmluZyxcbiAgICAuLi50b2tlbkFkZHJzOiBzdHJpbmdbXVxuICApID0+IFByb21pc2U8eyBbdG9rZW5BZGRyOiBzdHJpbmddOiBib29sZWFuIH0+O1xuXG4gIC8qKlxuICAgKiBjaGVjayBpZiBuZXR3b3JrIGlzIGFkZGVkIG9uIHRoZSBleHRlbnNpb25cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtcbiAgICpcbiAgICogQHJldHVybiBuZXR3b3JrIGV4aXN0c1xuICAgKlxuICAgKiBAc2VlIFdhbGxldENvbnRyb2xsZXIjaGFzTmV0d29ya1xuICAgKi9cbiAgaGFzTmV0d29yazogKG5ldHdvcms6IE9taXQ8TmV0d29ya0luZm8sICduYW1lJz4pID0+IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIHJlcXVlc3QgYWRkIG5ldHdvcmsgdG8gYnJvd3NlciBleHRlbnNpb25cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtcbiAgICpcbiAgICogQHJldHVybiBuZXR3b3JrIGV4aXN0c1xuICAgKlxuICAgKiBAc2VlIFdhbGxldENvbnRyb2xsZXIjYWRkTmV0d29ya1xuICAgKi9cbiAgYWRkTmV0d29yazogKG5ldHdvcms6IE5ldHdvcmtJbmZvKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBTb21lIG1vYmlsZSB3YWxsZXQgZW11bGF0ZXMgdGhlIGJlaGF2aW9yIG9mIGNocm9tZSBleHRlbnNpb24uXG4gICAqIEl0IGNvbmZpcm1zIHRoYXQgdGhlIGN1cnJlbnQgY29ubmVjdGlvbiBlbnZpcm9ubWVudCBpcyBzdWNoIGEgd2FsbGV0LlxuICAgKiAoSWYgeW91IGFyZSBydW5uaW5nIGNvbm5lY3QoKSBieSBjaGVja2luZyBhdmFpbGFibGVDb25uZWN0VHlwZSwgeW91IGRvIG5vdCBuZWVkIHRvIHVzZSB0aGlzIEFQSS4pXG4gICAqXG4gICAqIEBzZWUgV2FsbGV0Q29udHJvbGxlciNpc0Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyXG4gICAqL1xuICBpc0Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyOiAoKSA9PiBib29sZWFuO1xufVxuXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgY29uc3QgV2FsbGV0Q29udGV4dDogQ29udGV4dDxXYWxsZXQ+ID0gY3JlYXRlQ29udGV4dDxXYWxsZXQ+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VXYWxsZXQoKTogV2FsbGV0IHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoV2FsbGV0Q29udGV4dCk7XG59XG4iXX0=
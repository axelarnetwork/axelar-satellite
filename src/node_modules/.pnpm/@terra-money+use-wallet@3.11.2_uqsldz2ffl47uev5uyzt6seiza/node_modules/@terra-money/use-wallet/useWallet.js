import { createContext, useContext } from 'react';
// @ts-ignore
export const WalletContext = createContext();
export function useWallet() {
    return useContext(WalletContext);
}
//# sourceMappingURL=data:application/json;base64,
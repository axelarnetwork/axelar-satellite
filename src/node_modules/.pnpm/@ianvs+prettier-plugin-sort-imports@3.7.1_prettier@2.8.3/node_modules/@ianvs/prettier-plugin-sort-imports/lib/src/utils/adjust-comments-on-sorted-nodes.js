"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adjustCommentsOnSortedNodes = void 0;
var types_1 = require("@babel/types");
var lodash_clone_1 = __importDefault(require("lodash.clone"));
var lodash_isequal_1 = __importDefault(require("lodash.isequal"));
/**
 * Takes the original nodes before sorting and the final nodes after sorting.
 * Adjusts the comments on the final nodes so that they match the comments as
 * they were in the original nodes.
 * @param nodes A list of nodes in the order as they were originally.
 * @param finalNodes The same set of nodes, but in the final sorting order.
 * @returns A copied and adjusted set of nodes, containing comments
 */
var adjustCommentsOnSortedNodes = function (nodes, finalNodes) {
    // We will mutate a copy of the finalNodes, and extract comments from the original
    var finalNodesClone = finalNodes.map(lodash_clone_1.default);
    var firstNodesComments = nodes[0].leadingComments;
    // Remove all comments from sorted nodes
    finalNodesClone.forEach(types_1.removeComments);
    // insert comments other than the first comments
    finalNodesClone.forEach(function (node, index) {
        if ((0, lodash_isequal_1.default)(nodes[0].loc, node.loc))
            return;
        (0, types_1.addComments)(node, 'leading', finalNodes[index].leadingComments || []);
    });
    if (firstNodesComments) {
        (0, types_1.addComments)(finalNodesClone[0], 'leading', firstNodesComments);
    }
    return finalNodesClone;
};
exports.adjustCommentsOnSortedNodes = adjustCommentsOnSortedNodes;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preprocessor = void 0;
var parser_1 = require("@babel/parser");
var traverse_1 = __importDefault(require("@babel/traverse"));
var types_1 = require("@babel/types");
var constants_1 = require("../constants");
var get_code_from_ast_1 = require("../utils/get-code-from-ast");
var get_experimental_parser_plugins_1 = require("../utils/get-experimental-parser-plugins");
var get_sorted_nodes_1 = require("../utils/get-sorted-nodes");
function preprocessor(code, options) {
    var importOrderParserPlugins = options.importOrderParserPlugins, importOrder = options.importOrder, importOrderBuiltinModulesToTop = options.importOrderBuiltinModulesToTop, importOrderCaseInsensitive = options.importOrderCaseInsensitive, importOrderGroupNamespaceSpecifiers = options.importOrderGroupNamespaceSpecifiers, importOrderMergeDuplicateImports = options.importOrderMergeDuplicateImports, importOrderSeparation = options.importOrderSeparation, importOrderSortSpecifiers = options.importOrderSortSpecifiers;
    var importOrderCombineTypeAndValueImports = options.importOrderCombineTypeAndValueImports;
    if (importOrderCombineTypeAndValueImports &&
        !importOrderMergeDuplicateImports) {
        console.warn('[@ianvs/prettier-plugin-sort-imports]: The option importOrderCombineTypeAndValueImports will have no effect since importOrderMergeDuplicateImports is not also enabled.');
    }
    if (importOrderCombineTypeAndValueImports &&
        importOrder.some(function (group) { return group.includes(constants_1.TYPES_SPECIAL_WORD); })) {
        console.warn("[@ianvs/prettier-plugin-sort-imports]: The option importOrderCombineTypeAndValueImports will have no effect since ".concat(constants_1.TYPES_SPECIAL_WORD, " is used in importOrder."));
        importOrderCombineTypeAndValueImports = false;
    }
    var allOriginalImportNodes = [];
    var parserOptions = {
        sourceType: 'module',
        plugins: (0, get_experimental_parser_plugins_1.getExperimentalParserPlugins)(importOrderParserPlugins),
    };
    var ast = (0, parser_1.parse)(code, parserOptions);
    var directives = ast.program.directives;
    var interpreter = ast.program.interpreter;
    (0, traverse_1.default)(ast, {
        ImportDeclaration: function (path) {
            var tsModuleParent = path.findParent(function (p) {
                return (0, types_1.isTSModuleDeclaration)(p);
            });
            if (!tsModuleParent) {
                allOriginalImportNodes.push(path.node);
            }
        },
    });
    // short-circuit if there are no import declarations
    if (allOriginalImportNodes.length === 0) {
        return code;
    }
    var nodesToOutput = (0, get_sorted_nodes_1.getSortedNodes)(allOriginalImportNodes, {
        importOrder: importOrder,
        importOrderBuiltinModulesToTop: importOrderBuiltinModulesToTop,
        importOrderCaseInsensitive: importOrderCaseInsensitive,
        importOrderGroupNamespaceSpecifiers: importOrderGroupNamespaceSpecifiers,
        importOrderMergeDuplicateImports: importOrderMergeDuplicateImports,
        importOrderCombineTypeAndValueImports: importOrderCombineTypeAndValueImports,
        importOrderSeparation: importOrderSeparation,
        importOrderSortSpecifiers: importOrderSortSpecifiers,
    });
    return (0, get_code_from_ast_1.getCodeFromAst)({
        nodesToOutput: nodesToOutput,
        allOriginalImportNodes: allOriginalImportNodes,
        originalCode: code,
        directives: directives,
        interpreter: interpreter,
    });
}
exports.preprocessor = preprocessor;

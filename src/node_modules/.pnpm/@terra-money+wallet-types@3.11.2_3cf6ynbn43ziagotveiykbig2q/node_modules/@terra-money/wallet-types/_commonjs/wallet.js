"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInstallableWallets = exports.createConnectedWallet = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const types_1 = require("./types");
function createConnectedWallet({ connection, post, sign, signBytes, supportFeatures, wallets, status, network, }) {
    try {
        if (status === types_1.WalletStatus.WALLET_CONNECTED &&
            wallets.length > 0 &&
            terra_js_1.AccAddress.validate(wallets[0].terraAddress) &&
            !!connection) {
            const { terraAddress, connectType, design } = wallets[0];
            return {
                network,
                terraAddress: terraAddress,
                walletAddress: terraAddress,
                design,
                post: (tx) => {
                    return post(tx, terraAddress);
                },
                sign: (tx) => {
                    return sign(tx, terraAddress);
                },
                signBytes: (bytes) => {
                    return signBytes(bytes, terraAddress);
                },
                availablePost: supportFeatures.has('post'),
                availableSign: supportFeatures.has('sign'),
                availableSignBytes: supportFeatures.has('sign-bytes'),
                connectType,
                connection,
            };
        }
        else {
            return undefined;
        }
    }
    catch (_a) {
        return undefined;
    }
}
exports.createConnectedWallet = createConnectedWallet;
function createInstallableWallets({ status, installations, }) {
    if (status === types_1.WalletStatus.WALLET_NOT_CONNECTED) {
        return installations;
    }
    return undefined;
}
exports.createInstallableWallets = createInstallableWallets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1tb25leS93YWxsZXQtdHlwZXMvd2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFvRTtBQUNwRSxtQ0FVaUI7QUFpQ2pCLFNBQWdCLHFCQUFxQixDQUFDLEVBQ3BDLFVBQVUsRUFDVixJQUFJLEVBQ0osSUFBSSxFQUNKLFNBQVMsRUFDVCxlQUFlLEVBQ2YsT0FBTyxFQUNQLE1BQU0sRUFDTixPQUFPLEdBQ3FCO0lBQzVCLElBQUk7UUFDRixJQUNFLE1BQU0sS0FBSyxvQkFBWSxDQUFDLGdCQUFnQjtZQUN4QyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDbEIscUJBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztZQUM1QyxDQUFDLENBQUMsVUFBVSxFQUNaO1lBQ0EsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXpELE9BQU87Z0JBQ0wsT0FBTztnQkFDUCxZQUFZLEVBQUUsWUFBeUI7Z0JBQ3ZDLGFBQWEsRUFBRSxZQUF5QjtnQkFDeEMsTUFBTTtnQkFDTixJQUFJLEVBQUUsQ0FBQyxFQUFtQixFQUFFLEVBQUU7b0JBQzVCLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDaEMsQ0FBQztnQkFDRCxJQUFJLEVBQUUsQ0FBQyxFQUFtQixFQUFFLEVBQUU7b0JBQzVCLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDaEMsQ0FBQztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2dCQUNELGFBQWEsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztnQkFDMUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO2dCQUMxQyxrQkFBa0IsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztnQkFDckQsV0FBVztnQkFDWCxVQUFVO2FBQ1gsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtLQUNGO0lBQUMsV0FBTTtRQUNOLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0FBQ0gsQ0FBQztBQTdDRCxzREE2Q0M7QUFPRCxTQUFnQix3QkFBd0IsQ0FBQyxFQUN2QyxNQUFNLEVBQ04sYUFBYSxHQUNZO0lBQ3pCLElBQUksTUFBTSxLQUFLLG9CQUFZLENBQUMsb0JBQW9CLEVBQUU7UUFDaEQsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBUkQsNERBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY2NBZGRyZXNzLCBDcmVhdGVUeE9wdGlvbnMgfSBmcm9tICdAdGVycmEtbW9uZXkvdGVycmEuanMnO1xuaW1wb3J0IHtcbiAgQ29ubmVjdGlvbixcbiAgQ29ubmVjdFR5cGUsXG4gIEluc3RhbGxhdGlvbixcbiAgTmV0d29ya0luZm8sXG4gIFNpZ25CeXRlc1Jlc3VsdCxcbiAgU2lnblJlc3VsdCxcbiAgVHhSZXN1bHQsXG4gIFdhbGxldEluZm8sXG4gIFdhbGxldFN0YXR1cyxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbnR5cGUgSHVtYW5BZGRyID0gc3RyaW5nICYgeyBfX3R5cGU6ICdIdW1hbkFkZHInIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdGVkV2FsbGV0IHtcbiAgbmV0d29yazogTmV0d29ya0luZm87XG4gIHdhbGxldEFkZHJlc3M6IEh1bWFuQWRkcjtcbiAgLyoqIHRlcnJhQWRkcmVzcyBpcyBzYW1lIGFzIHdhbGxldEFkZHJlc3MgKi9cbiAgdGVycmFBZGRyZXNzOiBIdW1hbkFkZHI7XG4gIGRlc2lnbj86IHN0cmluZztcbiAgcG9zdDogKHR4OiBDcmVhdGVUeE9wdGlvbnMpID0+IFByb21pc2U8VHhSZXN1bHQ+O1xuICBzaWduOiAodHg6IENyZWF0ZVR4T3B0aW9ucykgPT4gUHJvbWlzZTxTaWduUmVzdWx0PjtcbiAgc2lnbkJ5dGVzOiAoYnl0ZXM6IEJ1ZmZlcikgPT4gUHJvbWlzZTxTaWduQnl0ZXNSZXN1bHQ+O1xuICBhdmFpbGFibGVQb3N0OiBib29sZWFuO1xuICBhdmFpbGFibGVTaWduOiBib29sZWFuO1xuICBhdmFpbGFibGVTaWduQnl0ZXM6IGJvb2xlYW47XG4gIGNvbm5lY3RUeXBlOiBDb25uZWN0VHlwZTtcbiAgY29ubmVjdGlvbjogQ29ubmVjdGlvbjtcbn1cblxuaW50ZXJmYWNlIENyZWF0ZUNvbm5lY3RlZFdhbGxldFBhcmFtcyB7XG4gIHN0YXR1czogV2FsbGV0U3RhdHVzO1xuICBuZXR3b3JrOiBOZXR3b3JrSW5mbztcbiAgd2FsbGV0czogV2FsbGV0SW5mb1tdO1xuICBjb25uZWN0aW9uOiBDb25uZWN0aW9uIHwgdW5kZWZpbmVkO1xuICBwb3N0OiAodHg6IENyZWF0ZVR4T3B0aW9ucywgdGVycmFBZGRyZXNzPzogc3RyaW5nKSA9PiBQcm9taXNlPFR4UmVzdWx0PjtcbiAgc2lnbjogKHR4OiBDcmVhdGVUeE9wdGlvbnMsIHRlcnJhQWRkcmVzcz86IHN0cmluZykgPT4gUHJvbWlzZTxTaWduUmVzdWx0PjtcbiAgc2lnbkJ5dGVzOiAoYnl0ZXM6IEJ1ZmZlciwgdGVycmFBZGRyZXNzPzogc3RyaW5nKSA9PiBQcm9taXNlPFNpZ25CeXRlc1Jlc3VsdD47XG4gIHN1cHBvcnRGZWF0dXJlczogU2V0PFxuICAgICdwb3N0JyB8ICdzaWduJyB8ICdzaWduLWJ5dGVzJyB8ICdjdzIwLXRva2VuJyB8ICduZXR3b3JrJ1xuICA+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdGVkV2FsbGV0KHtcbiAgY29ubmVjdGlvbixcbiAgcG9zdCxcbiAgc2lnbixcbiAgc2lnbkJ5dGVzLFxuICBzdXBwb3J0RmVhdHVyZXMsXG4gIHdhbGxldHMsXG4gIHN0YXR1cyxcbiAgbmV0d29yayxcbn06IENyZWF0ZUNvbm5lY3RlZFdhbGxldFBhcmFtcyk6IENvbm5lY3RlZFdhbGxldCB8IHVuZGVmaW5lZCB7XG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgc3RhdHVzID09PSBXYWxsZXRTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRCAmJlxuICAgICAgd2FsbGV0cy5sZW5ndGggPiAwICYmXG4gICAgICBBY2NBZGRyZXNzLnZhbGlkYXRlKHdhbGxldHNbMF0udGVycmFBZGRyZXNzKSAmJlxuICAgICAgISFjb25uZWN0aW9uXG4gICAgKSB7XG4gICAgICBjb25zdCB7IHRlcnJhQWRkcmVzcywgY29ubmVjdFR5cGUsIGRlc2lnbiB9ID0gd2FsbGV0c1swXTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV0d29yayxcbiAgICAgICAgdGVycmFBZGRyZXNzOiB0ZXJyYUFkZHJlc3MgYXMgSHVtYW5BZGRyLFxuICAgICAgICB3YWxsZXRBZGRyZXNzOiB0ZXJyYUFkZHJlc3MgYXMgSHVtYW5BZGRyLFxuICAgICAgICBkZXNpZ24sXG4gICAgICAgIHBvc3Q6ICh0eDogQ3JlYXRlVHhPcHRpb25zKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHBvc3QodHgsIHRlcnJhQWRkcmVzcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ246ICh0eDogQ3JlYXRlVHhPcHRpb25zKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHNpZ24odHgsIHRlcnJhQWRkcmVzcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25CeXRlczogKGJ5dGVzOiBCdWZmZXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gc2lnbkJ5dGVzKGJ5dGVzLCB0ZXJyYUFkZHJlc3MpO1xuICAgICAgICB9LFxuICAgICAgICBhdmFpbGFibGVQb3N0OiBzdXBwb3J0RmVhdHVyZXMuaGFzKCdwb3N0JyksXG4gICAgICAgIGF2YWlsYWJsZVNpZ246IHN1cHBvcnRGZWF0dXJlcy5oYXMoJ3NpZ24nKSxcbiAgICAgICAgYXZhaWxhYmxlU2lnbkJ5dGVzOiBzdXBwb3J0RmVhdHVyZXMuaGFzKCdzaWduLWJ5dGVzJyksXG4gICAgICAgIGNvbm5lY3RUeXBlLFxuICAgICAgICBjb25uZWN0aW9uLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuaW50ZXJmYWNlIENyZWF0ZUluc3RhbGxhYmxlV2FsbGV0cyB7XG4gIHN0YXR1czogV2FsbGV0U3RhdHVzO1xuICBpbnN0YWxsYXRpb25zOiBJbnN0YWxsYXRpb25bXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluc3RhbGxhYmxlV2FsbGV0cyh7XG4gIHN0YXR1cyxcbiAgaW5zdGFsbGF0aW9ucyxcbn06IENyZWF0ZUluc3RhbGxhYmxlV2FsbGV0cyk6IEluc3RhbGxhdGlvbltdIHwgdW5kZWZpbmVkIHtcbiAgaWYgKHN0YXR1cyA9PT0gV2FsbGV0U3RhdHVzLldBTExFVF9OT1RfQ09OTkVDVEVEKSB7XG4gICAgcmV0dXJuIGluc3RhbGxhdGlvbnM7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiJdfQ==
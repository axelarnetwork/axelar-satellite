"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTxMsgSetWithdrawAddress = exports.createTxMsgEditValidator = void 0;
const proto_1 = require("@evmos/proto");
const eip712_1 = require("@evmos/eip712");
function createTxMsgEditValidator(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_EDIT_VALIDATOR_TYPES);
    const msg = (0, eip712_1.createMsgEditValidator)(params.moniker, params.identity, params.website, params.securityContact, params.details, params.validatorAddress, params.commissionRate, params.minSelfDelegation);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const protoMessage = (0, proto_1.createMsgEditValidator)(params.moniker, params.identity, params.website, params.securityContact, params.details, params.validatorAddress, params.commissionRate, params.minSelfDelegation);
    const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgEditValidator = createTxMsgEditValidator;
function createTxMsgSetWithdrawAddress(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_SET_WITHDRAW_ADDRESS_TYPES);
    const msg = (0, eip712_1.createMsgSetWithdrawAddress)(params.delegatorAddress, params.withdrawAddress);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const protoMessage = (0, proto_1.createMsgSetWithdrawAddress)(params.delegatorAddress, params.withdrawAddress);
    const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgSetWithdrawAddress = createTxMsgSetWithdrawAddress;
//# sourceMappingURL=validator.js.map
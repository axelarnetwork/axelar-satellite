import { Chain, Fee, Period, Sender } from '../common';
export interface MessageMsgCreateClawbackVestingAccount {
    fromAddress: string;
    toAddress: string;
    startTime: number;
    lockupPeriods: Period[];
    vestingPeriods: Period[];
    merge: boolean;
}
export declare function createTxCreateClawbackVestingAccount(chain: Chain, sender: Sender, fee: Fee, memo: string, params: MessageMsgCreateClawbackVestingAccount): {
    signDirect: {
        body: import("@evmos/proto/dist/proto/cosmos/tx/v1beta1/tx").cosmos.tx.v1beta1.TxBody;
        authInfo: import("@evmos/proto/dist/proto/cosmos/tx/v1beta1/tx").cosmos.tx.v1beta1.AuthInfo;
        signBytes: string;
    };
    legacyAmino: {
        body: import("@evmos/proto/dist/proto/cosmos/tx/v1beta1/tx").cosmos.tx.v1beta1.TxBody;
        authInfo: import("@evmos/proto/dist/proto/cosmos/tx/v1beta1/tx").cosmos.tx.v1beta1.AuthInfo;
        signBytes: string;
    };
    eipToSign: {
        types: object;
        primaryType: string;
        domain: {
            name: string;
            version: string;
            chainId: number;
            verifyingContract: string;
            salt: string;
        };
        message: object;
    };
};
//# sourceMappingURL=msgCreateClawbackVestingAccount.d.ts.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTxMsgMultipleDelegate = exports.createTxMsgWithdrawValidatorCommission = exports.createTxMsgMultipleWithdrawDelegatorReward = exports.createTxMsgWithdrawDelegatorReward = exports.createTxMsgUndelegate = exports.createTxMsgBeginRedelegate = exports.createTxMsgDelegate = void 0;
const proto_1 = require("@evmos/proto");
const eip712_1 = require("@evmos/eip712");
function createTxMsgDelegate(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_DELEGATE_TYPES);
    const msg = (0, eip712_1.createMsgDelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const protoMessage = (0, proto_1.createMsgDelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
    const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgDelegate = createTxMsgDelegate;
function createTxMsgBeginRedelegate(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_BEGIN_REDELEGATE_TYPES);
    const msg = (0, eip712_1.createMsgBeginRedelegate)(sender.accountAddress, params.validatorSrcAddress, params.validatorDstAddress, params.amount, params.denom);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const protoMessage = (0, proto_1.createMsgBeginRedelegate)(sender.accountAddress, params.validatorSrcAddress, params.validatorDstAddress, params.amount, params.denom);
    const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgBeginRedelegate = createTxMsgBeginRedelegate;
function createTxMsgUndelegate(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_UNDELEGATE_TYPES);
    const msg = (0, eip712_1.createMsgUndelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const protoMessage = (0, proto_1.createMsgUndelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
    const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgUndelegate = createTxMsgUndelegate;
function createTxMsgWithdrawDelegatorReward(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_WITHDRAW_DELEGATOR_REWARD_TYPES);
    const msg = (0, eip712_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, params.validatorAddress);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const protoMessage = (0, proto_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, params.validatorAddress);
    const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgWithdrawDelegatorReward = createTxMsgWithdrawDelegatorReward;
function createTxMsgMultipleWithdrawDelegatorReward(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_WITHDRAW_DELEGATOR_REWARD_TYPES);
    const msgs = [];
    const protoMsgs = [];
    params.validatorAddresses.forEach((validator) => {
        msgs.push((0, eip712_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, validator));
        protoMsgs.push((0, proto_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, validator));
    });
    const messages = (0, eip712_1.generateMessageWithMultipleTransactions)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msgs);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const tx = (0, proto_1.createTransactionWithMultipleMessages)(protoMsgs, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgMultipleWithdrawDelegatorReward = createTxMsgMultipleWithdrawDelegatorReward;
function createTxMsgWithdrawValidatorCommission(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_WITHDRAW_VALIDATOR_COMMISSION_TYPES);
    const msg = (0, eip712_1.createMsgWithdrawValidatorCommission)(params.validatorAddress);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const protoMessage = (0, proto_1.createMsgWithdrawValidatorCommission)(params.validatorAddress);
    const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgWithdrawValidatorCommission = createTxMsgWithdrawValidatorCommission;
function createTxMsgMultipleDelegate(chain, sender, fee, memo, params) {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_DELEGATE_TYPES);
    const msgs = [];
    const protoMsgs = [];
    params.values.forEach((msgDelegate) => {
        msgs.push((0, eip712_1.createMsgDelegate)(sender.accountAddress, msgDelegate.validatorAddress, msgDelegate.amount, msgDelegate.denom));
        protoMsgs.push((0, proto_1.createMsgDelegate)(sender.accountAddress, msgDelegate.validatorAddress, msgDelegate.amount, msgDelegate.denom));
    });
    const messages = (0, eip712_1.generateMessageWithMultipleTransactions)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msgs);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const tx = (0, proto_1.createTransactionWithMultipleMessages)(protoMsgs, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
}
exports.createTxMsgMultipleDelegate = createTxMsgMultipleDelegate;
//# sourceMappingURL=staking.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTxMsgGenericRevoke = exports.createTxMsgGenericGrant = void 0;
const proto_1 = require("@evmos/proto");
const eip712_1 = require("@evmos/eip712");
const createTxMsgGenericGrant = (chain, sender, fee, memo, params) => {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_GENERIC_AUTHORIZATION_TYPES);
    const msg = (0, eip712_1.createMsgGenericAuthorization)(sender.accountAddress, params.botAddress, params.typeUrl, params.expires);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const msgGenericGrant = (0, proto_1.createGenericAuthorization)(params.typeUrl);
    const msgCosmos = (0, proto_1.createMsgGrant)(sender.accountAddress, params.botAddress, msgGenericGrant, params.expires);
    const tx = (0, proto_1.createTransaction)(msgCosmos, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
};
exports.createTxMsgGenericGrant = createTxMsgGenericGrant;
const createTxMsgGenericRevoke = (chain, sender, fee, memo, params) => {
    const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
    const types = (0, eip712_1.generateTypes)(eip712_1.MSG_REVOKE_GENERIC_AUTHORIZATION_TYPES);
    const msg = (0, eip712_1.createMsgRevokeGenericAuthorization)(sender.accountAddress, params.botAddress, params.typeUrl);
    const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
    const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
    const msgCosmos = (0, proto_1.createMsgRevoke)(sender.accountAddress, params.botAddress, params.typeUrl);
    const tx = (0, proto_1.createTransaction)(msgCosmos, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), 'ethsecp256', sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
    return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign,
    };
};
exports.createTxMsgGenericRevoke = createTxMsgGenericRevoke;
//# sourceMappingURL=generic.js.map